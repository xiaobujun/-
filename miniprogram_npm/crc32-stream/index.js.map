{"version":3,"sources":["index.js","crc32-stream.js","deflate-crc32-stream.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["/**\r\n * node-crc32-stream\r\n *\r\n * Copyright (c) 2014 Chris Talkington, contributors.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/node-crc32-stream/blob/master/LICENSE-MIT\r\n */\r\n\r\n\r\n\r\nmodule.exports = {\r\n  CRC32Stream: require('./crc32-stream'),\r\n  DeflateCRC32Stream: require('./deflate-crc32-stream')\r\n}\r\n","/**\r\n * node-crc32-stream\r\n *\r\n * Copyright (c) 2014 Chris Talkington, contributors.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/node-crc32-stream/blob/master/LICENSE-MIT\r\n */\r\n\r\n \r\n\r\nconst {Transform} = require('readable-stream');\r\n\r\nconst {crc32} = require('crc');\r\n\r\nclass CRC32Stream extends Transform {\r\n  constructor(options) {\r\n    super(options);\r\n    this.checksum = Buffer.allocUnsafe(4);\r\n    this.checksum.writeInt32BE(0, 0);\r\n\r\n    this.rawSize = 0;\r\n  }\r\n\r\n  _transform(chunk, encoding, callback) {\r\n    if (chunk) {\r\n      this.checksum = crc32(chunk, this.checksum);\r\n      this.rawSize += chunk.length;\r\n    }\r\n\r\n    callback(null, chunk);\r\n  }\r\n\r\n  digest(encoding) {\r\n    const checksum = Buffer.allocUnsafe(4);\r\n    checksum.writeUInt32BE(this.checksum >>> 0, 0);\r\n    return encoding ? checksum.toString(encoding) : checksum;\r\n  }\r\n\r\n  hex() {\r\n    return this.digest('hex').toUpperCase();\r\n  }\r\n\r\n  size() {\r\n    return this.rawSize;\r\n  }\r\n}\r\n\r\nmodule.exports = CRC32Stream;\r\n","/**\r\n * node-crc32-stream\r\n *\r\n * Copyright (c) 2014 Chris Talkington, contributors.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/node-crc32-stream/blob/master/LICENSE-MIT\r\n */\r\n\r\n\r\n\r\nconst {DeflateRaw} = require('zlib');\r\n\r\nconst {crc32} = require('crc');\r\n\r\nclass DeflateCRC32Stream extends DeflateRaw {\r\n  constructor(options) {\r\n    super(options);\r\n\r\n    this.checksum = Buffer.allocUnsafe(4);\r\n    this.checksum.writeInt32BE(0, 0);\r\n\r\n    this.rawSize = 0;\r\n    this.compressedSize = 0;\r\n  }\r\n\r\n  push(chunk, encoding) {\r\n    if (chunk) {\r\n      this.compressedSize += chunk.length;\r\n    }\r\n\r\n    return super.push(chunk, encoding);\r\n  }\r\n\r\n  write(chunk, enc, cb) {\r\n    if (chunk) {\r\n      this.checksum = crc32(chunk, this.checksum);\r\n      this.rawSize += chunk.length;\r\n    }\r\n\r\n    return super.write(chunk, enc, cb);\r\n  }\r\n\r\n  digest(encoding) {\r\n    const checksum = Buffer.allocUnsafe(4);\r\n    checksum.writeUInt32BE(this.checksum >>> 0, 0);\r\n    return encoding ? checksum.toString(encoding) : checksum;\r\n  }\r\n\r\n  hex() {\r\n    return this.digest('hex').toUpperCase();\r\n  }\r\n\r\n  size(compressed = false) {\r\n    if (compressed) {\r\n      return this.compressedSize;\r\n    } else {\r\n      return this.rawSize;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = DeflateCRC32Stream;\r\n"]}
{"version":3,"sources":["index.js","context.js","environmentManager.js","environment.js","database/index.js","error.js","utils/index.js","utils/fs.js","constant.js","utils/uuid.js","utils/cloud-api-request.js","utils/http-request.js","utils/auth.js","utils/cloudbase-request.js","utils/envLazy.js","function/index.js","function/packer.js","storage/index.js","utils/parallel.js","env/index.js","cam/index.js","billing/index.js","common/index.js","hosting/index.js","third/index.js","access/index.js","user/index.js","cloudBaseRun/index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,AENA,ADGA,AFMA;ACFA,AENA,ADGA,AFMA;ACFA,AENA,ADGA,AFMA;ACFA,AGTA,ADGA,ADGA,AFMA;ACFA,AGTA,ADGA,ADGA,AFMA;ACFA,AGTA,ADGA,ADGA,AFMA;ACFA,AGTA,ADGA,ADGA,AGTA,ALeA;ACFA,AGTA,ADGA,ADGA,AGTA,ALeA;ACFA,AGTA,ADGA,ADGA,AGTA,ALeA;AIXA,ADGA,ADGA,AGTA,ALeA,AMlBA;AFOA,ADGA,ADGA,AGTA,ALeA,AMlBA;AFOA,ADGA,ADGA,AGTA,ALeA,AMlBA;AFOA,ADGA,ADGA,AGTA,ALeA,AOrBA,ADGA;AFOA,ADGA,ADGA,AGTA,ALeA,AOrBA,ADGA;AFOA,ADGA,ADGA,AGTA,ALeA,AOrBA,ADGA;AELA,AJYA,ADGA,ADGA,AGTA,ALeA,AOrBA,ADGA;AELA,AJYA,ADGA,ADGA,AGTA,ALeA,AOrBA,ADGA;AELA,AJYA,ADGA,ADGA,AGTA,ALeA,AOrBA,ADGA;AELA,AJYA,ADGA,ADGA,AGTA,ALeA,AOrBA,ADGA,AGTA;ADIA,AJYA,ADGA,ADGA,AGTA,ALeA,AOrBA,ADGA,AGTA;ADIA,AJYA,ADGA,ADGA,AGTA,ALeA,AOrBA,ADGA,AGTA;ADIA,AJYA,ADGA,ADGA,AGTA,ALeA,AU9BA,AHSA,ADGA,AGTA;ADIA,AJYA,ADGA,ADGA,AGTA,ALeA,AU9BA,AHSA,ADGA,AGTA;ADIA,AJYA,ADGA,ADGA,AFMA,AU9BA,AHSA,ADGA,AGTA;ADIA,AJYA,ADGA,ADGA,AFMA,AU9BA,AHSA,AIZA,ALeA,AGTA;ADIA,AJYA,ADGA,ADGA,AFMA,AU9BA,AHSA,AIZA,ALeA,AGTA;ADIA,AJYA,ADGA,ADGA,AFMA,AU9BA,AHSA,AIZA,ALeA,AGTA;ADIA,AJYA,ADGA,ADGA,AFMA,AYpCA,AFMA,AHSA,AIZA,ALeA,AGTA;ADIA,AJYA,ADGA,ADGA,AFMA,AYpCA,AFMA,AHSA,AIZA,ALeA,AGTA;ADIA,AJYA,ADGA,ADGA,AFMA,AYpCA,AFMA,AHSA,AIZA,ALeA,AGTA;ADIA,AJYA,ADGA,ADGA,AFMA,AYpCA,AFMA,AGTA,ANkBA,AIZA,ALeA,AGTA;ADIA,AJYA,ADGA,ADGA,AFMA,AYpCA,AFMA,AGTA,ANkBA,AIZA,ALeA,AGTA;ADIA,AJYA,ADGA,ADGA,AFMA,AYpCA,AFMA,AGTA,ANkBA,AIZA,ALeA,AGTA;ADIA,AJYA,ADGA,ADGA,AFMA,AYpCA,AFMA,AGTA,ACHA,APqBA,AIZA,ALeA,AGTA;ADIA,AJYA,ADGA,ADGA,AFMA,AYpCA,AFMA,AGTA,ACHA,APqBA,AIZA,ALeA,AGTA;ADIA,AJYA,ADGA,ADGA,AFMA,AYpCA,AFMA,AGTA,ACHA,APqBA,AIZA,ALeA,AGTA;ADIA,AJYA,ADGA,ADGA,AavCA,Af6CA,AYpCA,AFMA,AGTA,ACHA,APqBA,AIZA,ALeA,AGTA;ADIA,AJYA,ADGA,ADGA,AavCA,Af6CA,AYpCA,AFMA,AGTA,ACHA,APqBA,AIZA,ALeA;AELA,AJYA,ADGA,ADGA,AavCA,Af6CA,AYpCA,AFMA,AGTA,ACHA,APqBA,AIZA,ALeA;AELA,AJYA,ADGA,ADGA,AavCA,ACHA,AhBgDA,AYpCA,AFMA,AGTA,ACHA,APqBA,AIZA,ALeA;AELA,AJYA,ADGA,ADGA,AavCA,ACHA,AhBgDA,AYpCA,AFMA,AGTA,ACHA,APqBA,AIZA,ALeA;AELA,AJYA,ADGA,ADGA,AavCA,ACHA,AhBgDA,AYpCA,AFMA,AGTA,ACHA,APqBA,AIZA,ALeA;AELA,AJYA,ADGA,AYpCA,ACHA,AhBgDA,AiBnDA,ALeA,AFMA,AGTA,ACHA,APqBA,AIZA,ALeA;AELA,AJYA,ADGA,AYpCA,ACHA,AhBgDA,AiBnDA,ALeA,AFMA,AGTA,ACHA,APqBA,AIZA,ALeA;AELA,AJYA,ADGA,AYpCA,ACHA,AhBgDA,AiBnDA,ALeA,AFMA,AGTA,ACHA,APqBA,AIZA,ALeA;AELA,AJYA,ADGA,AYpCA,ACHA,AhBgDA,AiBnDA,ALeA,AFMA,AGTA,ACHA,APqBA,AIZA,ALeA,AYpCA;AV+BA,AJYA,ADGA,AYpCA,ACHA,AhBgDA,AiBnDA,ALeA,AFMA,AGTA,ACHA,APqBA,AIZA,ALeA,AYpCA;AV+BA,AJYA,ADGA,AYpCA,ACHA,AhBgDA,AiBnDA,ALeA,AFMA,AGTA,ACHA,APqBA,AIZA,ALeA,AYpCA;AV+BA,AJYA,Ae7CA,AhBgDA,AYpCA,ACHA,AhBgDA,AiBnDA,ALeA,AFMA,AGTA,ACHA,APqBA,AIZA,ALeA,AYpCA;AV+BA,AJYA,Ae7CA,AhBgDA,AYpCA,ACHA,AhBgDA,AiBnDA,ALeA,AFMA,AGTA,ACHA,APqBA,AIZA,ALeA,AYpCA;AV+BA,AJYA,Ae7CA,AhBgDA,AYpCA,ACHA,AhBgDA,AiBnDA,ALeA,AFMA,AGTA,ACHA,APqBA,AIZA,ALeA,AYpCA;AELA,AZoCA,AJYA,Ae7CA,AhBgDA,AYpCA,ACHA,AhBgDA,AiBnDA,ALeA,AFMA,AGTA,ACHA,APqBA,AIZA,ALeA,AYpCA;AELA,AZoCA,AJYA,Ae7CA,AhBgDA,AYpCA,ACHA,AhBgDA,AiBnDA,ALeA,AFMA,AGTA,ANkBA,AIZA,ALeA,AYpCA;AELA,AZoCA,AJYA,Ae7CA,AhBgDA,AYpCA,ACHA,AhBgDA,AiBnDA,ALeA,AFMA,AGTA,ANkBA,AIZA,ALeA,AYpCA;AGRA,ADGA,AZoCA,AJYA,Ae7CA,AhBgDA,AYpCA,ACHA,AhBgDA,AiBnDA,ALeA,AFMA,AGTA,ANkBA,AIZA,ALeA,AYpCA;AGRA,ADGA,AZoCA,AJYA,Ae7CA,AhBgDA,AYpCA,ACHA,AhBgDA,AiBnDA,ALeA,AFMA,AGTA,ANkBA,AIZA,ALeA,AYpCA;AGRA,ADGA,AZoCA,AJYA,Ae7CA,AhBgDA,AYpCA,ACHA,AhBgDA,AiBnDA,ALeA,AFMA,AGTA,ANkBA,AIZA,ALeA,AYpCA;AGRA,ADGA,AENA,Ad0CA,AJYA,Ae7CA,AhBgDA,AYpCA,ACHA,AhBgDA,AiBnDA,ALeA,AFMA,AGTA,ANkBA,AIZA,ALeA,AYpCA;AGRA,ADGA,AENA,Ad0CA,AJYA,Ae7CA,AhBgDA,AYpCA,ACHA,AhBgDA,AiBnDA,ALeA,AFMA,AGTA,ANkBA,AIZA,ALeA,AYpCA;AGRA,ADGA,AENA,Ad0CA,AJYA,Ae7CA,AhBgDA,AYpCA,ACHA,AhBgDA,AiBnDA,ALeA,AFMA,AGTA,ANkBA,AIZA,ALeA,AYpCA;AGRA,ADGA,AENA,Ad0CA,AJYA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,AvBqEA,AiBnDA,ALeA,AFMA,AGTA,ANkBA,AIZA,ALeA,AYpCA;AGRA,ADGA,AENA,Ad0CA,AJYA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,AvBqEA,AiBnDA,ALeA,AFMA,AGTA,ANkBA,AIZA,ALeA,AYpCA;AGRA,ADGA,AENA,Ad0CA,AJYA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,AvBqEA,AiBnDA,ALeA,AFMA,AGTA,ANkBA,AIZA,ALeA,AYpCA;AGRA,ADGA,AENA,Ad0CA,AJYA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,AvBqEA,AiBnDA,AOrBA,AZoCA,AFMA,AGTA,ANkBA,AIZA,ALeA,AYpCA;AGRA,ADGA,AENA,Ad0CA,AJYA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,AvBqEA,AiBnDA,AOrBA,AZoCA,AFMA,AGTA,ANkBA,AIZA,ALeA,AYpCA;AGRA,ADGA,AENA,Ad0CA,AJYA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,AvBqEA,AiBnDA,AOrBA,AZoCA,AFMA,AGTA,ANkBA,AIZA,ALeA,AYpCA;AOpBA,AJYA,ADGA,AENA,Ad0CA,AJYA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,AvBqEA,AiBnDA,AOrBA,AZoCA,AFMA,AGTA,ANkBA,AIZA,ALeA,AYpCA;AOpBA,AJYA,ADGA,AENA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,AvBqEA,AiBnDA,AOrBA,AZoCA,AFMA,AGTA,ANkBA,AIZA,ALeA,AYpCA;AOpBA,AJYA,ADGA,AENA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,AvBqEA,AiBnDA,AOrBA,AZoCA,AFMA,AGTA,ANkBA,AIZA,ALeA,AYpCA;AOpBA,AJYA,ADGA,AENA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,AvBqEA,AiBnDA,AOrBA,AENA,Ad0CA,AFMA,AGTA,ANkBA,ADGA,AYpCA;AOpBA,AJYA,ADGA,AENA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,AvBqEA,AiBnDA,AOrBA,AENA,Ad0CA,AFMA,AGTA,ANkBA,ADGA,AYpCA;AOpBA,AJYA,ADGA,AENA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,AvBqEA,AiBnDA,AOrBA,AENA,Ad0CA,AFMA,AGTA,ANkBA,ADGA,AYpCA;AOpBA,AJYA,ADGA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,AvBqEA,AiBnDA,AOrBA,AENA,Ad0CA,AFMA,AGTA,ANkBA,ADGA,AYpCA;AOpBA,AJYA,ADGA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,AvBqEA,AiBnDA,AOrBA,AENA,Ad0CA,AFMA,AGTA,ANkBA,ADGA,AYpCA;AOpBA,AJYA,ADGA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,AvBqEA,AiBnDA,AOrBA,AENA,Ad0CA,AFMA,AGTA,ANkBA,ADGA,AYpCA;AOpBA,AJYA,ADGA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AOrBA,AENA,Ad0CA,AFMA,AGTA,ANkBA,ADGA,AYpCA;AOpBA,AJYA,ADGA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AOrBA,AENA,Ad0CA,AFMA,AGTA,ANkBA,ADGA,AYpCA;AOpBA,AJYA,ADGA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AOrBA,AENA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,AJYA,ADGA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AOrBA,AENA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,AJYA,ADGA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AOrBA,AENA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,AJYA,ADGA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AOrBA,AENA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,AJYA,ADGA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AOrBA,AENA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,AJYA,ADGA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,AJYA,ADGA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,AJYA,ADGA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,AJYA,ADGA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,AJYA,ADGA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,AJYA,ADGA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,AJYA,ADGA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,AJYA,ADGA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,AJYA,ADGA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,ALeA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,ALeA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,ALeA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,ALeA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,ALeA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,ALeA,AOrBA,ALeA,AlBsDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,ALeA,AOrBA,AvBqEA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,ALeA,AOrBA,AvBqEA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,ALeA,AOrBA,AvBqEA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AGTA,APqBA,AYpCA;AOpBA,ALeA,AOrBA,AvBqEA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AJYA,AYpCA;AOpBA,ALeA,AOrBA,AvBqEA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AJYA,AYpCA;AOpBA,ALeA,AOrBA,AvBqEA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AJYA,AYpCA;AOpBA,ALeA,AOrBA,AvBqEA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AJYA,AYpCA;AOpBA,ALeA,AOrBA,AvBqEA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AJYA,AYpCA;AOpBA,ALeA,AOrBA,AvBqEA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AJYA,AYpCA;AOpBA,ALeA,AOrBA,AvBqEA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AJYA,AYpCA;AOpBA,ALeA,AOrBA,AvBqEA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AJYA,AYpCA;AOpBA,ALeA,AOrBA,AvBqEA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AJYA,AYpCA;AOpBA,ALeA,AhBgDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AJYA,AYpCA;AOpBA,ALeA,AhBgDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AJYA,AYpCA;AOpBA,ALeA,AhBgDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AJYA,AYpCA;AOpBA,ALeA,AhBgDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AJYA,AYpCA;AOpBA,ALeA,AhBgDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AQxBA;AOpBA,ALeA,AhBgDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA,AQxBA;AOpBA,ALeA,AhBgDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA;Ae5CA,ALeA,AhBgDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA;Ae5CA,ALeA,AhBgDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA;Ae5CA,ALeA,AhBgDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA;Ae5CA,ALeA,AhBgDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA;Ae5CA,ALeA,AhBgDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA;Ae5CA,ALeA,AhBgDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA;Ae5CA,ALeA,AhBgDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA;Ae5CA,ALeA,AhBgDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA;Ae5CA,ALeA,AhBgDA,Ae7CA,AhBgDA,AYpCA,ACHA,AOrBA,ANkBA,AS3BA,Ad0CA,AFMA;Ae5CA,ALeA,AhBgDA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ALeA,AhBgDA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ALeA,AhBgDA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ALeA,AhBgDA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,ACHA,AOrBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,AS3BA,AhBgDA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,APqBA;Ae5CA,ArB+DA,Ae7CA,AJYA,AQxBA,ANkBA,APqBA;ANmBA,Ae7CA,AJYA,AQxBA,ANkBA,APqBA;ANmBA,Ae7CA,AJYA,AQxBA,ANkBA,APqBA;ANmBA,Ae7CA,AJYA,AQxBA,ANkBA,APqBA;ANmBA,Ae7CA,AJYA,AQxBA,ANkBA,APqBA;ANmBA,Ae7CA,AJYA,AQxBA,ANkBA,APqBA;ANmBA,Ae7CA,AJYA,AQxBA,ANkBA,APqBA;ANmBA,Ae7CA,AJYA,AQxBA,ANkBA,APqBA;ANmBA,Ae7CA,AJYA,AQxBA,ANkBA,APqBA;ANmBA,Ae7CA,AJYA,AQxBA,ANkBA,APqBA;ANmBA,Ae7CA,AJYA,AQxBA,ANkBA,APqBA;ANmBA,Ae7CA,AJYA,AQxBA,ANkBA,APqBA;ANmBA,Ae7CA,AJYA,AQxBA,ANkBA,APqBA;ANmBA,Ae7CA,AJYA,AQxBA,ANkBA,APqBA;ANmBA,Ae7CA,AJYA,AQxBA,ANkBA,APqBA;ANmBA,Ae7CA,AJYA,AQxBA,ANkBA,APqBA;ANmBA,Ae7CA,AJYA,AQxBA,ANkBA,APqBA;ANmBA,Ae7CA,AJYA,AQxBA,ANkBA,APqBA;ANmBA,Ae7CA,AJYA,AQxBA,ANkBA,APqBA;ANmBA,Ae7CA,AJYA,AQxBA,ANkBA,APqBA;ANmBA,Ae7CA,AJYA,AQxBA,ANkBA;AbwCA,Ae7CA,AJYA,AQxBA,ANkBA;AbwCA,Ae7CA,AJYA,AQxBA,ANkBA;AbwCA,Ae7CA,AJYA,AQxBA,ANkBA;AbwCA,Ae7CA,AJYA,AQxBA,ANkBA;AbwCA,Ae7CA,AJYA,AQxBA,ANkBA;AbwCA,Ae7CA,AJYA,AQxBA,ANkBA;AbwCA,Ae7CA,AJYA,AQxBA,ANkBA;AbwCA,Ae7CA,AJYA,AQxBA,ANkBA;AbwCA,Ae7CA,AJYA,AQxBA,ANkBA;AbwCA,Ae7CA,AJYA,AQxBA,ANkBA;AbwCA,Ae7CA,AJYA,AQxBA,ANkBA;AbwCA,Ae7CA,AJYA,AQxBA,ANkBA;AbwCA,Ae7CA,AJYA,AQxBA,ANkBA;AbwCA,Ae7CA,AJYA,AQxBA,ANkBA;AbwCA,Ae7CA,AJYA,AQxBA,ANkBA;AbwCA,Ae7CA,AJYA,AQxBA,ANkBA;AbwCA,Ae7CA,AJYA,AQxBA,ANkBA;AbwCA,Ae7CA,AJYA,AQxBA,ANkBA;AbwCA,Ae7CA,AJYA,AQxBA,ANkBA;AbwCA,Ae7CA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkBA;AELA,AJYA,AQxBA,ANkfile":"index.js","sourcesContent":["\nconst context_1 = require(\"./context\");\nconst environmentManager_1 = require(\"./environmentManager\");\nclass CloudBase {\n    constructor(config = {}) {\n        this.cloudBaseConfig = {};\n        let { secretId, secretKey, token, envId, proxy, region, envType } = config;\n        // config 中传入的 secretId secretkey 必须同时存在\n        if ((secretId && !secretKey) || (!secretId && secretKey)) {\n            throw new Error('secretId and secretKey must be a pair');\n        }\n        this.cloudBaseConfig = {\n            secretId,\n            secretKey,\n            token,\n            envId,\n            envType,\n            proxy,\n            region\n        };\n        // 初始化 context\n        this.context = new context_1.CloudBaseContext(this.cloudBaseConfig);\n        this.environmentManager = new environmentManager_1.EnvironmentManager(this.context);\n        this.environmentManager.add(envId || '');\n    }\n    /**\n     * init 初始化 为单例\n     *\n     * @static\n     * @param {ManagerConfig} config\n     * @returns {CloudBase}\n     * @memberof CloudBase\n     */\n    static init(config) {\n        if (!CloudBase.cloudBase) {\n            CloudBase.cloudBase = new CloudBase(config);\n        }\n        return CloudBase.cloudBase;\n    }\n    addEnvironment(envId) {\n        this.environmentManager.add(envId);\n    }\n    currentEnvironment() {\n        return this.environmentManager.getCurrentEnv();\n    }\n    get functions() {\n        return this.currentEnvironment().getFunctionService();\n    }\n    get storage() {\n        return this.currentEnvironment().getStorageService();\n    }\n    get database() {\n        return this.currentEnvironment().getDatabaseService();\n    }\n    get hosting() {\n        return this.currentEnvironment().getHostingService();\n    }\n    get access() {\n        return this.currentEnvironment().getAccessService();\n    }\n    get cloudApp() {\n        return this.currentEnvironment().getCloudBaseRunService();\n    }\n    commonService(service, version) {\n        return this.currentEnvironment().getCommonService(service, version);\n    }\n    get env() {\n        return this.currentEnvironment().getEnvService();\n    }\n    get third() {\n        return this.currentEnvironment().getThirdService();\n    }\n    get user() {\n        return this.currentEnvironment().getUserService();\n    }\n    getEnvironmentManager() {\n        return this.environmentManager;\n    }\n    getManagerConfig() {\n        return this.cloudBaseConfig;\n    }\n}\nmodule.exports = CloudBase;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CloudBaseContext = void 0;\nclass CloudBaseContext {\n    constructor({ secretId = '', secretKey = '', token = '', proxy = '', region = '', envType = '' }) {\n        this.secretId = secretId;\n        this.secretKey = secretKey;\n        this.token = token;\n        this.proxy = proxy;\n        this.region = region;\n        this.envType = envType;\n    }\n}\nexports.CloudBaseContext = CloudBaseContext;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EnvironmentManager = void 0;\nconst environment_1 = require(\"./environment\");\nconst constant_1 = require(\"./constant\");\nclass EnvironmentManager {\n    constructor(context) {\n        this.envs = {};\n        this.currentEnv = null;\n        this.cloudBaseContext = context;\n    }\n    getCurrentEnv() {\n        if (!this.currentEnv) {\n            throw new Error(constant_1.ERROR.CURRENT_ENVIRONMENT_IS_NULL);\n        }\n        return this.currentEnv;\n    }\n    add(envId) {\n        if (!this.envs[envId]) {\n            this.envs[envId] = new environment_1.Environment(this.cloudBaseContext, envId);\n        }\n        if (!this.currentEnv) {\n            this.currentEnv = this.envs[envId];\n        }\n    }\n    remove(envId) {\n        this.envs[envId] = null;\n        delete this.envs[envId];\n    }\n    get(envId) {\n        return this.envs[envId] || null;\n    }\n    switchEnv(envId) {\n        const env = this.envs[envId];\n        if (env) {\n            this.currentEnv = env;\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}\nexports.EnvironmentManager = EnvironmentManager;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Environment = void 0;\nconst database_1 = require(\"./database\");\nconst function_1 = require(\"./function\");\nconst storage_1 = require(\"./storage\");\nconst env_1 = require(\"./env\");\nconst common_1 = require(\"./common\");\nconst error_1 = require(\"./error\");\nconst constant_1 = require(\"./constant\");\nconst utils_1 = require(\"./utils\");\nconst hosting_1 = require(\"./hosting\");\nconst third_1 = require(\"./third\");\nconst access_1 = require(\"./access\");\nconst user_1 = require(\"./user\");\nconst cloudBaseRun_1 = require(\"./cloudBaseRun\");\nclass Environment {\n    constructor(context, envId) {\n        this.inited = false;\n        this.envId = envId;\n        this.cloudBaseContext = context;\n        this.envType = context.envType;\n        // 拉取当前环境 的环境信息 todo\n        this.functionService = new function_1.FunctionService(this);\n        this.databaseService = new database_1.DatabaseService(this);\n        this.storageService = new storage_1.StorageService(this);\n        this.envService = new env_1.EnvService(this);\n        this.hostingService = new hosting_1.HostingService(this);\n        this.thirdService = new third_1.ThirdService(this);\n        this.accessService = new access_1.AccessService(this);\n        this.userService = new user_1.UserService(this);\n        this.cloudBaseRunService = new cloudBaseRun_1.CloudBaseRunService(this);\n    }\n    async lazyInit() {\n        if (!this.inited) {\n            const envConfig = this.envService;\n            return envConfig.getEnvInfo().then(envInfo => {\n                this.lazyEnvironmentConfig = envInfo.EnvInfo;\n                if (!this.lazyEnvironmentConfig.EnvId) {\n                    throw new error_1.CloudBaseError(`Environment ${this.envId} not found`);\n                }\n                this.inited = true;\n                return this.lazyEnvironmentConfig;\n            });\n        }\n        else {\n            return this.lazyEnvironmentConfig;\n        }\n    }\n    getEnvId() {\n        return this.envId;\n    }\n    getEnvType() {\n        return this.envType;\n    }\n    getStorageService() {\n        return this.storageService;\n    }\n    getDatabaseService() {\n        return this.databaseService;\n    }\n    getFunctionService() {\n        return this.functionService;\n    }\n    getEnvService() {\n        return this.envService;\n    }\n    getHostingService() {\n        return this.hostingService;\n    }\n    getThirdService() {\n        return this.thirdService;\n    }\n    getAccessService() {\n        return this.accessService;\n    }\n    getUserService() {\n        return this.userService;\n    }\n    getCloudBaseRunService() {\n        return this.cloudBaseRunService;\n    }\n    getCommonService(serviceType = 'tcb', serviceVersion) {\n        return new common_1.CommonService(this, serviceType, serviceVersion);\n    }\n    getServicesEnvInfo() {\n        const envConfig = this.envService;\n        return envConfig.getEnvInfo().then(envInfo => {\n            return envInfo.EnvInfo;\n        });\n    }\n    getAuthConfig() {\n        let { secretId, secretKey, token, proxy, region } = this.cloudBaseContext;\n        const envId = this.getEnvId();\n        if (!secretId || !secretKey) {\n            // 未主动传入密钥，从环境变量中读取\n            const envSecretId = utils_1.getEnvVar(constant_1.ENV_NAME.ENV_SECRETID);\n            const envSecretKey = utils_1.getEnvVar(constant_1.ENV_NAME.ENV_SECRETKEY);\n            const envToken = utils_1.getEnvVar(constant_1.ENV_NAME.ENV_SESSIONTOKEN);\n            if (!envSecretId || !envSecretKey) {\n                if (utils_1.getRuntime() === constant_1.RUN_ENV.SCF) {\n                    throw new Error('missing authoration key, redeploy the function');\n                }\n                else {\n                    throw new Error('missing secretId or secretKey of tencent cloud');\n                }\n            }\n            else {\n                secretId = envSecretId;\n                secretKey = envSecretKey;\n                token = envToken;\n            }\n        }\n        return {\n            envId,\n            secretId,\n            secretKey,\n            token,\n            proxy,\n            region\n        };\n    }\n}\nexports.Environment = Environment;\n","\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DatabaseService = void 0;\nconst path_1 = __importDefault(require(\"path\"));\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nfunction preLazy() {\n    return function (target, propertyKey, descriptor) {\n        let oldFunc = descriptor.value;\n        descriptor.value = async function () {\n            // 检查当前环境对象上是否已加载好环境信息\n            const currentEnvironment = this.environment;\n            if (!currentEnvironment.inited) {\n                await currentEnvironment.lazyInit();\n            }\n            let result = await oldFunc.apply(this, arguments);\n            return result;\n        };\n    };\n}\nclass DatabaseService {\n    constructor(environment) {\n        this.DEFAULT_MGO_OFFSET = 0;\n        this.DEFAULT_MGO_LIMIT = 100;\n        this.environment = environment;\n        this.envId = environment.getEnvId();\n        this.dbOpService = new utils_1.CloudService(environment.cloudBaseContext, DatabaseService.tcbServiceVersion.service, DatabaseService.tcbServiceVersion.version);\n        this.collOpService = new utils_1.CloudService(environment.cloudBaseContext, DatabaseService.flexdbServiceVersion.service, DatabaseService.flexdbServiceVersion.version);\n    }\n    getCurrEnvironment() {\n        return this.environment;\n    }\n    getDatabaseConfig() {\n        const currEnv = this.environment;\n        const { Databases } = currEnv.lazyEnvironmentConfig;\n        return {\n            Tag: Databases[0].InstanceId\n        };\n    }\n    async checkCollectionExists(collectionName) {\n        try {\n            const result = await this.describeCollection(collectionName);\n            return {\n                RequestId: result.RequestId,\n                Exists: true\n            };\n        }\n        catch (e) {\n            return {\n                RequestId: e.requestId,\n                Msg: e.message,\n                Exists: false\n            };\n        }\n    }\n    async createCollection(collectionName) {\n        let { Tag } = this.getDatabaseConfig();\n        const res = await this.collOpService.request('CreateTable', {\n            Tag,\n            TableName: collectionName\n        });\n        return res;\n    }\n    async deleteCollection(collectionName) {\n        // 先检查当前集合是否存在\n        const existRes = await this.checkCollectionExists(collectionName);\n        if (existRes.Exists) {\n            let { Tag } = this.getDatabaseConfig();\n            const res = await this.collOpService.request('DeleteTable', {\n                Tag,\n                TableName: collectionName\n            });\n            return res;\n        }\n        else {\n            return existRes;\n        }\n    }\n    async updateCollection(collectionName, indexiesInfo) {\n        let { Tag } = this.getDatabaseConfig();\n        const res = await this.collOpService.request('UpdateTable', Object.assign({ Tag, TableName: collectionName }, indexiesInfo));\n        return res;\n    }\n    async describeCollection(collectionName) {\n        let { Tag } = this.getDatabaseConfig();\n        return this.collOpService.request('DescribeTable', {\n            Tag,\n            TableName: collectionName\n        });\n    }\n    // 获取\n    async listCollections(options = {\n        MgoLimit: this.DEFAULT_MGO_LIMIT,\n        MgoOffset: this.DEFAULT_MGO_OFFSET\n    }) {\n        let { Tag } = this.getDatabaseConfig();\n        if (options.MgoLimit === undefined) {\n            options.MgoLimit = this.DEFAULT_MGO_LIMIT;\n        }\n        if (options.MgoOffset === undefined) {\n            options.MgoOffset = this.DEFAULT_MGO_OFFSET;\n        }\n        const res = await this.collOpService.request('ListTables', Object.assign({ Tag }, options));\n        if (res.Tables === null) {\n            // 无集合\n            res.Collections = [];\n        }\n        else {\n            // 云 API 返回转换为与TCB一致\n            res.Collections = res.Tables.map(item => {\n                item.CollectionName = item.TableName;\n                delete item.TableName;\n                return item;\n            });\n        }\n        delete res.Tables;\n        return res;\n    }\n    async createCollectionIfNotExists(collectionName) {\n        const existRes = await this.checkCollectionExists(collectionName);\n        let res;\n        if (!existRes.Exists) {\n            res = await this.createCollection(collectionName);\n            return {\n                RequestId: res.RequestId,\n                IsCreated: true,\n                ExistsResult: existRes\n            };\n        }\n        else {\n            return {\n                RequestId: '',\n                IsCreated: false,\n                ExistsResult: existRes\n            };\n        }\n    }\n    // 检查集合中是否存在某索引\n    async checkIndexExists(collectionName, indexName) {\n        const result = await this.describeCollection(collectionName);\n        let exists = result.Indexes.some(item => {\n            return item.Name === indexName;\n        });\n        return {\n            RequestId: result.RequestId,\n            Exists: exists\n        };\n    }\n    // 查询DB的数据存储分布\n    async distribution() {\n        const res = await this.dbOpService.request('DescribeDbDistribution', {\n            EnvId: this.envId\n        });\n        return res;\n    }\n    // 查询DB 迁移进度\n    async migrateStatus(jobId) {\n        const res = await this.dbOpService.request('DatabaseMigrateQueryInfo', {\n            EnvId: this.envId,\n            JobId: jobId\n        });\n        return res;\n    }\n    // 数据库导入数据\n    async import(collectionName, file, options) {\n        let filePath;\n        let fileType;\n        if (file['FilePath']) {\n            let temp = 'tmp/db-imports/';\n            if (options['ObjectKeyPrefix']) {\n                temp = options['ObjectKeyPrefix'];\n                delete options['ObjectKeyPrefix'];\n            }\n            filePath = path_1.default.join(temp, path_1.default.basename(file['FilePath']));\n            // 调用cos接口 上传文件  todo\n            await this.environment.getStorageService().uploadFile({\n                localPath: file['FilePath'],\n                cloudPath: filePath\n            });\n            fileType = path_1.default.extname(filePath).substring(1);\n        }\n        else if (file['ObjectKey']) {\n            delete options['ObjectKeyPrefix'];\n            filePath = file['ObjectKey'];\n            fileType = path_1.default.extname(filePath).substring(1);\n        }\n        else {\n            throw new error_1.CloudBaseError('Miss file.filePath or file.objectKey');\n        }\n        if (file['FileType']) {\n            fileType = file['FileType'];\n        }\n        return this.dbOpService.request('DatabaseMigrateImport', Object.assign({ CollectionName: collectionName, FilePath: filePath, FileType: fileType, EnvId: this.envId }, options));\n    }\n    // 数据库导出数据\n    async export(collectionName, file, options) {\n        let filePath;\n        let fileType;\n        if (file['ObjectKey']) {\n            filePath = file['ObjectKey'];\n            fileType = path_1.default.extname(filePath).substring(1);\n        }\n        else {\n            throw new error_1.CloudBaseError('Miss file.filePath or file.objectKey');\n        }\n        if (file['FileType']) {\n            fileType = file['FileType'];\n        }\n        return this.dbOpService.request('DatabaseMigrateExport', Object.assign({ CollectionName: collectionName, FilePath: filePath, FileType: fileType, EnvId: this.envId }, options));\n    }\n}\nDatabaseService.tcbServiceVersion = {\n    service: 'tcb',\n    version: '2018-06-08'\n};\nDatabaseService.flexdbServiceVersion = {\n    service: 'flexdb',\n    version: '2018-11-27'\n};\n__decorate([\n    preLazy()\n], DatabaseService.prototype, \"createCollection\", null);\n__decorate([\n    preLazy()\n], DatabaseService.prototype, \"deleteCollection\", null);\n__decorate([\n    preLazy()\n], DatabaseService.prototype, \"updateCollection\", null);\n__decorate([\n    preLazy()\n], DatabaseService.prototype, \"describeCollection\", null);\n__decorate([\n    preLazy()\n], DatabaseService.prototype, \"listCollections\", null);\nexports.DatabaseService = DatabaseService;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CloudBaseError = void 0;\nclass CloudBaseError extends Error {\n    constructor(message, options = {}) {\n        super();\n        this.name = 'CloudBaseError';\n        const { code = '', action = '', original = null, requestId = '' } = options;\n        this.message = action ? `[${action}] ${message}` : message;\n        this.original = original;\n        this.code = code;\n        this.requestId = requestId;\n        this.action = action;\n    }\n}\nexports.CloudBaseError = CloudBaseError;\n","\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.upperCaseObjKey = exports.upperCaseStringFisrt = exports.sleep = exports.rsaEncrypt = exports.getEnvVar = exports.getRuntime = exports.compressToZip = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst archiver_1 = __importDefault(require(\"archiver\"));\nconst crypto_1 = __importDefault(require(\"crypto\"));\nconst constant_1 = require(\"../constant\");\nvar uuid_1 = require(\"./uuid\");\nObject.defineProperty(exports, \"guid6\", { enumerable: true, get: function () { return uuid_1.guid6; } });\n__exportStar(require(\"./cloud-api-request\"), exports);\n__exportStar(require(\"./auth\"), exports);\n__exportStar(require(\"./cloudbase-request\"), exports);\n__exportStar(require(\"./http-request\"), exports);\n__exportStar(require(\"./envLazy\"), exports);\n__exportStar(require(\"./fs\"), exports);\nasync function compressToZip(option) {\n    const { dirPath, outputPath, ignore, pattern = '**/*' } = option;\n    return new Promise((resolve, reject) => {\n        const output = fs_1.default.createWriteStream(outputPath);\n        const archive = archiver_1.default('zip');\n        output.on('close', function () {\n            resolve({\n                zipPath: outputPath,\n                size: Math.ceil(archive.pointer() / 1024)\n            });\n        });\n        archive.on('error', function (err) {\n            reject(err);\n        });\n        archive.pipe(output);\n        // append files from a glob pattern\n        archive.glob(pattern, {\n            // 目标路径\n            cwd: dirPath,\n            ignore: ignore,\n            dot: true\n        });\n        archive.finalize();\n    });\n}\nexports.compressToZip = compressToZip;\nfunction getRuntime() {\n    return process.env[constant_1.ENV_NAME.ENV_RUNENV];\n}\nexports.getRuntime = getRuntime;\nfunction getEnvVar(envName) {\n    return process.env[envName];\n}\nexports.getEnvVar = getEnvVar;\nfunction rsaEncrypt(data) {\n    const buffer = Buffer.from(data);\n    const encrypted = crypto_1.default.publicEncrypt({\n        key: constant_1.PUBLIC_RSA_KEY,\n        padding: crypto_1.default.constants.RSA_PKCS1_PADDING\n    }, buffer);\n    return encrypted.toString('base64');\n}\nexports.rsaEncrypt = rsaEncrypt;\nfunction sleep(time) {\n    return new Promise(resolve => {\n        setTimeout(() => {\n            resolve();\n        }, time);\n    });\n}\nexports.sleep = sleep;\nfunction upperCaseStringFisrt(str) {\n    return str.slice(0, 1).toUpperCase().concat(str.slice(1));\n}\nexports.upperCaseStringFisrt = upperCaseStringFisrt;\nfunction upperCaseObjKey(object) {\n    const type = Object.prototype.toString.call(object).slice(8, -1);\n    if (type === 'Object') {\n        let newObj = {};\n        // eslint-disable-next-line guard-for-in\n        for (let key in object) {\n            newObj[upperCaseStringFisrt(key)] = upperCaseObjKey(object[key]);\n        }\n        return newObj;\n    }\n    if (type === 'Array') {\n        let newArr = [];\n        for (let item of object) {\n            newArr.push(upperCaseObjKey(item));\n        }\n        return newArr;\n    }\n    return object;\n}\nexports.upperCaseObjKey = upperCaseObjKey;\n","\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.delSync = exports.formateFileSize = exports.isDirectory = exports.checkReadable = exports.checkFullAccess = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst error_1 = require(\"../error\");\nconst del_1 = __importDefault(require(\"del\"));\n// 检查路径是否可以访问（读、写）\nfunction checkFullAccess(dest, throwError = false) {\n    try {\n        // 可见、可写\n        fs_1.default.accessSync(dest, fs_1.default.constants.F_OK);\n        fs_1.default.accessSync(dest, fs_1.default.constants.W_OK);\n        fs_1.default.accessSync(dest, fs_1.default.constants.R_OK);\n        return true;\n    }\n    catch (e) {\n        if (throwError) {\n            throw new error_1.CloudBaseError(`路径不存在或无读写权限：${dest}`);\n        }\n        else {\n            return false;\n        }\n    }\n}\nexports.checkFullAccess = checkFullAccess;\n// 检查路径是否可以写\nfunction checkReadable(dest, throwError = false) {\n    try {\n        // 可见、可读\n        fs_1.default.accessSync(dest, fs_1.default.constants.F_OK);\n        fs_1.default.accessSync(dest, fs_1.default.constants.R_OK);\n        return true;\n    }\n    catch (e) {\n        if (throwError) {\n            throw new error_1.CloudBaseError(`路径不存在或无读权限：${dest}`);\n        }\n        else {\n            return false;\n        }\n    }\n}\nexports.checkReadable = checkReadable;\nfunction isDirectory(dest) {\n    checkFullAccess(dest, true);\n    return fs_1.default.statSync(dest).isDirectory();\n}\nexports.isDirectory = isDirectory;\nfunction formateFileSize(size, unit) {\n    const unitMap = {\n        KB: 1024,\n        MB: Math.pow(1024, 2),\n        GB: Math.pow(1024, 3)\n    };\n    return Number(size / unitMap[unit]).toFixed(2);\n}\nexports.formateFileSize = formateFileSize;\nfunction delSync(patterns) {\n    del_1.default.sync(patterns, { force: true });\n}\nexports.delSync = delSync;\n","\n// // cloudbase cli 配置的字段名\n// export class ConfigItems {\n//     static credentail = 'credential'\n// }\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SCF_STATUS = exports.ROLE_NAME = exports.PUBLIC_RSA_KEY = exports.ERROR = exports.SERVICE_TYPE = exports.ENDPOINT = exports.RUN_ENV = exports.SDK_VERSION = exports.ENV_NAME = void 0;\nexports.ENV_NAME = {\n    ENV_SECRETID: 'TENCENTCLOUD_SECRETID',\n    ENV_SECRETKEY: 'TENCENTCLOUD_SECRETKEY',\n    ENV_SESSIONTOKEN: 'TENCENTCLOUD_SESSIONTOKEN',\n    ENV_TCB_ENV_ID: 'TENCENTCLOUD_TCB_ENVID',\n    ENV_RUNENV: 'TENCENTCLOUD_RUNENV',\n    ENV_RUNENV_SCF: 'TENCENTCLOUD_RUNENV=SCF'\n};\nexports.SDK_VERSION = 'TCB-NODE-MANAGER/1.0.O';\nexports.RUN_ENV = {\n    SCF: 'SCF'\n};\nexports.ENDPOINT = {\n    TCB: 'tcb.tencentcloudapi.com',\n    SCF: 'scf.tencentcloudapi.com',\n    COS: 'cos.tencentcloudapi.com',\n    FLEXDB: 'flexdb.tencentcloudapi.com'\n};\nexports.SERVICE_TYPE = {\n    TCB: 'tcb'\n};\nexports.ERROR = {\n    MISS_SECRET_INFO_IN_ENV: 'MISS_SECRET_INFO_IN_ENV',\n    MISS_SECRET_INFO_IN_ARGS: 'MISS_SECRET_INFO_IN_ARGS',\n    CURRENT_ENVIRONMENT_IS_NULL: 'CURRENT_ENVIRONMENT_IS_NULL',\n    ENV_ID_NOT_EXISTS: 'ENV_ID_NOT_EXISTS'\n};\nexports.PUBLIC_RSA_KEY = `\n-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC0ZLB0ZpWWFsHPnDDw++Nc2wI3\nnl2uyOrIJ5FUfxt4GAmt1Faf5pgMxAnL9exEUrrUDUX8Ri1R0KyfnHQQwCvKt8T8\nbgILIJe9UB8e9dvFqgqH2oA8Vqwi0YqDcvFLFJk2BJbm/0QYtZ563FumW8LEXAgu\nUeHi/0OZN9vQ33jWMQIDAQAB\n-----END PUBLIC KEY-----\n`;\nexports.ROLE_NAME = {\n    TCB: 'TCB_QcsRole'\n};\nexports.SCF_STATUS = {\n    ACTIVE: 'Active',\n    CREATING: 'Creating',\n    UPDATING: 'Updating',\n    CREATE_FAILED: 'CreateFailed'\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.uuidv4 = exports.guid6 = void 0;\n// 环境 uuid\nfunction guid6() {\n    return Math.floor((1 + Math.random()) * 0x1000000)\n        .toString(16)\n        .substring(1);\n}\nexports.guid6 = guid6;\nfunction uuidv4() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        const r = (Math.random() * 16) | 0;\n        const v = c === 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n}\nexports.uuidv4 = uuidv4;\n","\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CloudService = void 0;\nconst crypto_1 = __importDefault(require(\"crypto\"));\nconst url_1 = require(\"url\");\nconst query_string_1 = __importDefault(require(\"query-string\"));\nconst error_1 = require(\"../error\");\nconst http_request_1 = require(\"./http-request\");\nconst constant_1 = require(\"../constant\");\nconst utils_1 = require(\"../utils\");\nfunction isObject(x) {\n    return typeof x === 'object' && !Array.isArray(x) && x !== null;\n}\n// 移除对象中的空值\nfunction deepRemoveVoid(obj) {\n    if (Array.isArray(obj)) {\n        return obj.map(deepRemoveVoid);\n    }\n    else if (isObject(obj)) {\n        let result = {};\n        for (let key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                const value = obj[key];\n                if (typeof value !== 'undefined' && value !== null) {\n                    result[key] = deepRemoveVoid(value);\n                }\n            }\n        }\n        return result;\n    }\n    else {\n        return obj;\n    }\n}\nfunction sha256(message, secret, encoding) {\n    const hmac = crypto_1.default.createHmac('sha256', secret);\n    return hmac.update(message).digest(encoding);\n}\nfunction getHash(message) {\n    const hash = crypto_1.default.createHash('sha256');\n    return hash.update(message).digest('hex');\n}\nfunction getDate(timestamp) {\n    const date = new Date(timestamp * 1000);\n    const year = date.getUTCFullYear();\n    const month = ('0' + (date.getUTCMonth() + 1)).slice(-2);\n    // UTC 日期，非本地时间\n    const day = ('0' + date.getUTCDate()).slice(-2);\n    return `${year}-${month}-${day}`;\n}\nclass CloudService {\n    /* eslint-disable-next-line */\n    constructor(context, service, version, baseParams) {\n        this.service = service;\n        this.version = version;\n        this.timeout = 60000;\n        this.baseParams = baseParams || {};\n        this.cloudBaseContext = context;\n    }\n    get baseUrl() {\n        const tcb = process.env.TCB_BASE_URL || 'https://tcb.tencentcloudapi.com';\n        const urlMap = {\n            tcb,\n            scf: 'https://scf.tencentcloudapi.com',\n            vpc: 'https://vpc.tencentcloudapi.com',\n            flexdb: 'https://flexdb.tencentcloudapi.com',\n            cam: 'https://cam.tencentcloudapi.com',\n            cdn: 'https://cdn.tencentcloudapi.com'\n        };\n        if (urlMap[this.service]) {\n            return urlMap[this.service];\n        }\n        else {\n            return `https://${this.service}.tencentcloudapi.com`;\n        }\n    }\n    async request(action, data = {}, method = 'POST') {\n        this.action = action;\n        this.data = deepRemoveVoid(Object.assign(Object.assign({}, data), this.baseParams));\n        this.method = method;\n        this.url = this.baseUrl;\n        let { secretId, secretKey, token } = this.cloudBaseContext;\n        // 当在云函数环境下执行时，可init时不传入密钥，取环境变量中密钥使用\n        // request执行时一般处于main函数内部，取环境变量逻辑写这里更可靠\n        if (!secretId || !secretKey) {\n            // 未主动传入密钥，从环境变量中读取\n            const envSecretId = utils_1.getEnvVar(constant_1.ENV_NAME.ENV_SECRETID);\n            const envSecretKey = utils_1.getEnvVar(constant_1.ENV_NAME.ENV_SECRETKEY);\n            const envToken = utils_1.getEnvVar(constant_1.ENV_NAME.ENV_SESSIONTOKEN);\n            if (!envSecretId || !envSecretKey) {\n                if (utils_1.getRuntime() === constant_1.RUN_ENV.SCF) {\n                    throw new Error('missing authoration key, redeploy the function');\n                }\n                else {\n                    throw new Error('missing secretId or secretKey of tencent cloud');\n                }\n            }\n            else {\n                secretId = envSecretId;\n                secretKey = envSecretKey;\n                token = envToken;\n            }\n        }\n        this.secretId = secretId;\n        this.secretKey = secretKey;\n        this.token = token;\n        try {\n            const data = await this.requestWithSign();\n            if (data.Response.Error) {\n                const tcError = new error_1.CloudBaseError(data.Response.Error.Message, {\n                    action,\n                    requestId: data.Response.RequestId,\n                    code: data.Response.Error.Code,\n                    original: data.Response.Error\n                });\n                throw tcError;\n            }\n            else {\n                return data.Response;\n            }\n        }\n        catch (e) {\n            if (e.name === 'CloudBaseError') {\n                throw e;\n            }\n            else {\n                throw new error_1.CloudBaseError(e.message, {\n                    action,\n                    code: e.code\n                });\n            }\n        }\n    }\n    async requestWithSign() {\n        // data 中可能带有 readStream，由于需要计算整个 body 的 hash，\n        // 所以这里把 readStream 转为 Buffer\n        // await convertReadStreamToBuffer(data)\n        const timestamp = Math.floor(new Date().getTime() / 1000);\n        const { proxy } = this.cloudBaseContext;\n        const { method, timeout, data = {} } = this;\n        if (method === 'GET') {\n            this.url += '?' + query_string_1.default.stringify(data);\n        }\n        if (method === 'POST') {\n            this.payload = data;\n        }\n        const config = {\n            method,\n            timeout,\n            headers: {\n                Host: new url_1.URL(this.url).host,\n                'X-TC-Action': this.action,\n                // region 优先级 mock本地注入 > init 指定 > 云函数环境变量\n                'X-TC-Region': process.env.TCB_REGION ||\n                    this.cloudBaseContext.region ||\n                    process.env.TENCENTCLOUD_REGION ||\n                    'ap-shanghai',\n                'X-TC-Timestamp': timestamp,\n                'X-TC-Version': this.version\n            }\n        };\n        if (this.token) {\n            config.headers['X-TC-Token'] = this.token;\n        }\n        if (method === 'GET') {\n            config.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n        }\n        if (method === 'POST') {\n            config.body = JSON.stringify(data);\n            config.headers['Content-Type'] = 'application/json';\n        }\n        const sign = this.getRequestSign(timestamp);\n        config.headers['Authorization'] = sign;\n        return http_request_1.fetch(this.url, config, proxy);\n    }\n    getRequestSign(timestamp) {\n        const { method = 'POST', url, service, secretId, secretKey } = this;\n        const urlObj = new url_1.URL(url);\n        // 通用头部\n        let headers = '';\n        const signedHeaders = 'content-type;host';\n        if (method === 'GET') {\n            headers = 'content-type:application/x-www-form-urlencoded\\n';\n        }\n        else if (method === 'POST') {\n            headers = 'content-type:application/json\\n';\n        }\n        headers += `host:${urlObj.hostname}\\n`;\n        const path = urlObj.pathname;\n        const querystring = urlObj.search.slice(1);\n        const payloadHash = this.payload ? getHash(JSON.stringify(this.payload)) : getHash('');\n        const canonicalRequest = `${method}\\n${path}\\n${querystring}\\n${headers}\\n${signedHeaders}\\n${payloadHash}`;\n        const date = getDate(timestamp);\n        const StringToSign = `TC3-HMAC-SHA256\\n${timestamp}\\n${date}/${service}/tc3_request\\n${getHash(canonicalRequest)}`;\n        const kDate = sha256(date, `TC3${secretKey}`);\n        const kService = sha256(service, kDate);\n        const kSigning = sha256('tc3_request', kService);\n        const signature = sha256(StringToSign, kSigning, 'hex');\n        return `TC3-HMAC-SHA256 Credential=${secretId}/${date}/${service}/tc3_request, SignedHeaders=${signedHeaders}, Signature=${signature}`;\n    }\n}\nexports.CloudService = CloudService;\n","\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fetchStream = exports.fetch = void 0;\nconst url_1 = require(\"url\");\nconst node_fetch_1 = __importDefault(require(\"node-fetch\"));\nconst https_proxy_agent_1 = __importDefault(require(\"https-proxy-agent\"));\nconst error_1 = require(\"../error\");\n// 使用 fetch + 代理\nasync function fetch(url, config = {}, proxy) {\n    if (proxy || process.env.http_proxy) {\n        config.agent = new https_proxy_agent_1.default(proxy || process.env.http_proxy);\n    }\n    // 解决中文编码问题\n    const escapeUrl = new url_1.URL(url).toString();\n    let json;\n    let text;\n    try {\n        const res = await node_fetch_1.default(escapeUrl, config);\n        text = await res.text();\n        json = JSON.parse(text);\n    }\n    catch (e) {\n        // 某些情况下回返回 HTML 文本异常\n        // JSON 解析错误，抛出原响应文本\n        if (e.name === 'SyntaxError') {\n            throw new error_1.CloudBaseError(text);\n        }\n        throw new error_1.CloudBaseError(e);\n    }\n    return json;\n}\nexports.fetch = fetch;\nasync function fetchStream(url, config = {}, proxy) {\n    if (proxy || process.env.http_proxy) {\n        config.agent = new https_proxy_agent_1.default(proxy || process.env.http_proxy);\n    }\n    // 解决中文编码问题\n    const escapeUrl = new url_1.URL(url).toString();\n    return node_fetch_1.default(escapeUrl, config);\n}\nexports.fetchStream = fetchStream;\n","\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAuth = void 0;\nconst crypto_1 = __importDefault(require(\"crypto\"));\nfunction camSafeUrlEncode(str) {\n    return encodeURIComponent(str)\n        .replace(/!/g, '%21')\n        .replace(/'/g, '%27')\n        .replace(/\\(/g, '%28')\n        .replace(/\\)/g, '%29')\n        .replace(/\\*/g, '%2A');\n}\nfunction getAuth(options) {\n    const SecretId = options.secretId;\n    const SecretKey = options.secretKey;\n    const method = options.method.toLowerCase() || 'get';\n    const queryParams = options.params || {};\n    const headers = options.headers || {};\n    let pathname = options.pathname || '/';\n    pathname.indexOf('/') !== 0 && (pathname = '/' + pathname);\n    if (!SecretId) {\n        throw Error('missing param SecretId');\n    }\n    if (!SecretKey) {\n        throw Error('missing param SecretKey');\n    }\n    const getObjectKeys = function (obj) {\n        return Object.keys(obj)\n            .filter(key => typeof obj[key] !== 'undefined')\n            .sort();\n    };\n    const objectToString = function (obj) {\n        const list = [];\n        const keyList = getObjectKeys(obj);\n        keyList.forEach(key => {\n            let value = obj[key] === null || typeof obj[key] === 'undefined' ? '' : obj[key];\n            if (typeof value !== 'string') {\n                value = JSON.stringify(value);\n            }\n            list.push(`${camSafeUrlEncode(key.toLowerCase())}=${camSafeUrlEncode(value)}`);\n        });\n        return list.join('&');\n    };\n    // 签名有效起止时间\n    const now = Math.floor(Date.now() / 1000) - 1;\n    // 签名过期时间为当前 + 900s\n    const exp = now + 900;\n    // 要用到的 Authorization 参数列表\n    const qSignAlgorithm = 'sha1';\n    const qAk = SecretId;\n    const qKeyTime = now + ';' + exp;\n    const qHeaderList = getObjectKeys(headers)\n        .join(';')\n        .toLowerCase();\n    const qUrlParamList = getObjectKeys(queryParams)\n        .join(';')\n        .toLowerCase();\n    // 签名算法说明文档：https://www.qcloud.com/document/product/436/7778\n    // 步骤一：计算 SignKey\n    const signKey = crypto_1.default\n        .createHmac('sha1', SecretKey)\n        .update(qKeyTime)\n        .digest('hex');\n    // 步骤二：构成 FormatString\n    const formatString = [\n        method,\n        pathname,\n        objectToString(queryParams),\n        objectToString(headers),\n        ''\n    ].join('\\n');\n    // 步骤三：计算 StringToSign\n    const sha1Algo = crypto_1.default.createHash('sha1');\n    sha1Algo.update(Buffer.from(formatString));\n    const res = sha1Algo.digest('hex');\n    const stringToSign = ['sha1', qKeyTime, res, ''].join('\\n');\n    // 步骤四：计算 Signature\n    const qSignature = crypto_1.default\n        .createHmac('sha1', signKey)\n        .update(stringToSign)\n        .digest('hex');\n    // 步骤五：构造 Authorization\n    const authorization = [\n        'q-sign-algorithm=' + qSignAlgorithm,\n        'q-ak=' + qAk,\n        'q-sign-time=' + qKeyTime,\n        'q-key-time=' + qKeyTime,\n        'q-header-list=' + qHeaderList,\n        'q-url-param-list=' + qUrlParamList,\n        'q-signature=' + qSignature\n    ].join('&');\n    return authorization;\n}\nexports.getAuth = getAuth;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cloudBaseRequest = void 0;\nconst auth_1 = require(\"./auth\");\nconst http_request_1 = require(\"./http-request\");\nconst SUPPORT_REGIONS = ['ap-shanghai', 'ap-guangzhou'];\nasync function cloudBaseRequest(options) {\n    // const url = 'https://tcb-admin.tencentcloudapi.com/admin'\n    const { config, params = {}, method = 'POST', headers = {} } = options;\n    const { region, envId } = config;\n    const isInScf = process.env.TENCENTCLOUD_RUNENV === 'SCF'; // 是否scf环境内\n    const protocol = isInScf ? 'http' : 'https';\n    const isInContainer = !!process.env.KUBERNETES_SERVICE_HOST; // 是否容器环境\n    // region 优先级 本地mock 注入 > init region > 云函数环境变量region\n    const finalRegion = process.env.TCB_REGION || region || process.env.TENCENTCLOUD_REGION || '';\n    let internetRegionEndpoint = '';\n    let internalRegionEndpoint = '';\n    if (finalRegion) {\n        if (SUPPORT_REGIONS.includes(finalRegion)) {\n            internetRegionEndpoint = `${finalRegion}.tcb-api.tencentcloudapi.com`;\n            internalRegionEndpoint = `internal.${finalRegion}.tcb-api.tencentcloudapi.com`;\n        }\n        else {\n            console.warn('当前仅支持上海，广州地域，其他地域默认解析到固定域名(上海地域)');\n            internetRegionEndpoint = `tcb-api.tencentcloudapi.com`;\n            internalRegionEndpoint = `internal.tcb-api.tencentcloudapi.com`;\n        }\n    }\n    else {\n        internetRegionEndpoint = `tcb-api.tencentcloudapi.com`;\n        internalRegionEndpoint = `internal.tcb-api.tencentcloudapi.com`;\n    }\n    // 有地域信息则访问地域级别域名，无地域信息则访问默认域名，默认域名固定解析到上海地域保持兼容\n    // const internetRegionEndpoint = finalRegion\n    //     ? `${finalRegion}.tcb-api.tencentcloudapi.com`\n    //     : `tcb-api.tencentcloudapi.com`\n    // const internalRegionEndpoint = finalRegion\n    //     ? `internal.${finalRegion}.tcb-api.tencentcloudapi.com`\n    //     : `internal.tcb-api.tencentcloudapi.com`\n    // 同地域走内网，跨地域走公网\n    const isSameRegionVisit = region ? region === process.env.TENCENTCLOUD_REGION : true;\n    // const endpoint = isInScf || isInContainer ? internalRegionEndpoint : internetRegionEndpoint\n    const endpoint = isSameRegionVisit && (isInScf || isInContainer)\n        ? internalRegionEndpoint\n        : internetRegionEndpoint;\n    // const envpoint = envId ? `${envId}.${endpoint}` : endpoint\n    const envpoint = endpoint;\n    const url = `${protocol}://${envpoint}/admin`;\n    const requestData = Object.assign(Object.assign({}, params), { envName: config.envId, timestamp: Date.now() });\n    const requestHeaders = Object.assign(Object.assign({}, headers), { 'content-type': 'application/json', 'user-agent': `cloudbase-manager-node/0.1.0`, 'x-tcb-source': 'cloudbase-manager-node, not-scf' });\n    const { secretId, secretKey, token, proxy } = config;\n    const authData = {\n        secretId,\n        secretKey,\n        method: method,\n        pathname: '/admin',\n        params: requestData,\n        headers: requestHeaders\n    };\n    const authorization = auth_1.getAuth(authData);\n    const requestBody = Object.assign(Object.assign({}, requestData), { sessionToken: token, authorization });\n    const res = await http_request_1.fetch(url, {\n        method,\n        body: JSON.stringify(requestBody),\n        headers: requestHeaders\n    }, process.env.TCB_ADMIN_PROXY || proxy);\n    return res;\n}\nexports.cloudBaseRequest = cloudBaseRequest;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.preLazy = void 0;\nfunction preLazy() {\n    return function (target, propertyKey, descriptor) {\n        let oldFunc = descriptor.value;\n        descriptor.value = async function () {\n            // 检查当前环境对象上是否已加载好环境信息\n            const currentEnvironment = this.environment;\n            if (!currentEnvironment.inited) {\n                await currentEnvironment.lazyInit();\n            }\n            let result = await oldFunc.apply(this, arguments);\n            return result;\n        };\n    };\n}\nexports.preLazy = preLazy;\n","\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FunctionService = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst packer_1 = require(\"./packer\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst constant_1 = require(\"../constant\");\n// 是否为 Node 函数\nfunction isNodeFunction(runtime) {\n    // 不严格限制\n    return runtime === 'Nodejs10.15' || runtime === 'Nodejs8.9' || (runtime === null || runtime === void 0 ? void 0 : runtime.includes('Nodejs'));\n}\n// 解析函数配置，换成请求参数\nfunction configToParams(options) {\n    var _a, _b, _c, _d, _e;\n    const { func, codeSecret, baseParams } = options;\n    let installDependency;\n    // Node 函数默认安装依赖\n    installDependency = isNodeFunction(func.runtime) ? 'TRUE' : 'FALSE';\n    // 是否安装依赖，选项可以覆盖\n    if (typeof func.installDependency !== 'undefined') {\n        installDependency = func.installDependency ? 'TRUE' : 'FALSE';\n    }\n    // 转换环境变量\n    const envVariables = Object.keys(func.envVariables || {}).map(key => ({\n        Key: key,\n        Value: func.envVariables[key]\n    }));\n    // 当不存在 L5 配置时，不修改 L5 状态，否则根据 true/false 进行修改\n    const l5Enable = typeof (func === null || func === void 0 ? void 0 : func.l5) === 'undefined' ? null : (func === null || func === void 0 ? void 0 : func.l5) ? 'TRUE' : 'FALSE';\n    const params = Object.assign(Object.assign({}, baseParams), { FunctionName: func.name, \n        // 不可选择\n        L5Enable: l5Enable });\n    // 函数绑定的角色\n    params.Role = func.role || params.Role;\n    // 修复参数存在 undefined 字段时，会出现鉴权失败的情况\n    // Environment 为覆盖式修改，不保留已有字段\n    envVariables.length && (params.Environment = { Variables: envVariables });\n    // 处理入口\n    params.Handler = func.handler || 'index.main';\n    // 默认超时时间为 10S\n    params.Timeout = Number(func.timeout) || 10;\n    // 默认运行环境 Nodejs8.9\n    params.Runtime = func.runtime || 'Nodejs8.9';\n    if (((_a = func === null || func === void 0 ? void 0 : func.vpc) === null || _a === void 0 ? void 0 : _a.subnetId) !== undefined && ((_b = func === null || func === void 0 ? void 0 : func.vpc) === null || _b === void 0 ? void 0 : _b.vpcId) !== undefined) {\n        // VPC 网络\n        params.VpcConfig = {\n            SubnetId: (_c = func === null || func === void 0 ? void 0 : func.vpc) === null || _c === void 0 ? void 0 : _c.subnetId,\n            VpcId: (_d = func === null || func === void 0 ? void 0 : func.vpc) === null || _d === void 0 ? void 0 : _d.vpcId\n        };\n    }\n    // 运行内存\n    params.MemorySize = func.memorySize || 256;\n    // 自动安装依赖\n    params.InstallDependency = installDependency;\n    // 代码保护\n    if (codeSecret || func.codeSecret) {\n        params.CodeSecret = codeSecret || func.codeSecret;\n    }\n    // 函数层\n    if ((_e = func === null || func === void 0 ? void 0 : func.layers) === null || _e === void 0 ? void 0 : _e.length) {\n        const transformLayers = func.layers.map(item => ({\n            LayerName: item.name,\n            LayerVersion: item.version\n        }));\n        params.Layers = transformLayers;\n    }\n    return params;\n}\nclass FunctionService {\n    constructor(environment) {\n        this.environment = environment;\n        this.scfService = new utils_1.CloudService(environment.cloudBaseContext, 'scf', '2018-04-16');\n        this.vpcService = new utils_1.CloudService(environment.cloudBaseContext, 'vpc', '2017-03-12');\n    }\n    /**\n     * 增量更新函数代码\n     * @param {IUpdateFunctionIncrementalCodeParam} funcParam\n     * @returns {Promise<void>}\n     * @memberof FunctionService\n     */\n    async updateFunctionIncrementalCode(funcParam) {\n        const { namespace } = this.getFunctionConfig();\n        const { functionRootPath, func, deleteFiles, addFiles } = funcParam;\n        const { name, runtime } = func;\n        const params = {\n            FunctionName: name,\n            Namespace: namespace\n        };\n        let packer;\n        let base64;\n        if (deleteFiles) {\n            params.DeleteFiles = deleteFiles;\n        }\n        if (addFiles) {\n            // 将选中的增量文件或增量文件夹  转base64\n            const codeType = runtime === 'Java8' ? packer_1.CodeType.JavaFile : packer_1.CodeType.File;\n            packer = new packer_1.FunctionPacker({\n                codeType,\n                name,\n                root: functionRootPath,\n                ignore: [],\n                incrementalPath: addFiles\n            });\n            await packer.build();\n            base64 = await packer.getBase64Code();\n            if (!base64) {\n                throw new error_1.CloudBaseError('函数不存在！');\n            }\n            params.AddFiles = base64;\n        }\n        return this.scfService.request('UpdateFunctionIncrementalCode', params);\n    }\n    /**\n     * 创建云函数\n     * @param {ICreateFunctionParam} funcParam\n     * @returns {(Promise<IResponseInfo | ICreateFunctionRes>)}\n     */\n    async createFunction(funcParam) {\n        const { namespace } = this.getFunctionConfig();\n        const { func, functionRootPath, force = false, base64Code, codeSecret, functionPath, } = funcParam;\n        const funcName = func.name;\n        const params = configToParams({\n            func,\n            codeSecret,\n            baseParams: {\n                Namespace: namespace,\n                Role: 'TCB_QcsRole',\n                Stamp: 'MINI_QCBASE'\n            }\n        });\n        params.Code = await this.getCodeParams({\n            func,\n            base64Code,\n            functionPath,\n            functionRootPath\n        }, params.InstallDependency);\n        try {\n            // 创建云函数\n            const res = await this.scfService.request('CreateFunction', params);\n            // 等待函数状态正常\n            await this.waitFunctionActive(funcName, codeSecret);\n            // 创建函数触发器、失败自动重试\n            await this.retryCreateTrigger(funcName, func.triggers);\n            // 设置路径，创建云接入路径\n            if (func.path) {\n                await this.createAccessPath(funcName, func.path);\n            }\n            // 检查函数状态\n            await this.waitFunctionActive(funcName, codeSecret);\n            return res;\n        }\n        catch (e) {\n            // 函数存在\n            const functionExist = e.code === 'ResourceInUse.FunctionName' || e.code === 'ResourceInUse.Function';\n            // 已存在同名函数，强制更新\n            if (functionExist && force) {\n                // 1. 更新函数配置和代码，同名函数可能存在 codeSecret，先修改代码，清除 codeSecret\n                const codeRes = await this.updateFunctionCode({\n                    func,\n                    base64Code,\n                    functionPath,\n                    functionRootPath,\n                    codeSecret: codeSecret\n                });\n                // 等待函数状态正常\n                await this.waitFunctionActive(funcName, codeSecret);\n                // 2. 更新函数配置\n                const configRes = await this.updateFunctionConfig(func);\n                // 等待函数状态正常\n                await this.waitFunctionActive(funcName, codeSecret);\n                // 3. 创建函数触发器\n                const triggerRes = await this.retryCreateTrigger(funcName, func.triggers);\n                // 设置路径，创建云接入路径\n                if (func.path) {\n                    await this.createAccessPath(funcName, func.path);\n                }\n                // 检查函数状态\n                await this.waitFunctionActive(funcName, codeSecret);\n                // 返回全部操作的响应值\n                return {\n                    triggerRes,\n                    configRes,\n                    codeRes\n                };\n            }\n            // 不强制覆盖，抛出错误\n            if (e.message && !force) {\n                throw new error_1.CloudBaseError(`[${funcName}] 部署失败：\\n${e.message}`, {\n                    code: e.code,\n                    requestId: e.requestId\n                });\n            }\n            throw e;\n        }\n    }\n    /**\n     * @param {number} [limit=20]\n     * @param {number} [offset=0]\n     * @returns {Promise<{\n     *         Functions: Record<string, string>[]\n     *         RequestId: string\n     *         TotalCount: number\n     *     }>}\n     * @memberof FunctionService\n     */\n    async getFunctionList(limit = 20, offset = 0) {\n        // 获取Function 环境配置\n        const { namespace } = this.getFunctionConfig();\n        const res = await this.scfService.request('ListFunctions', {\n            Namespace: namespace,\n            Limit: limit,\n            Offset: offset\n        });\n        return res;\n    }\n    /**\n     * 列出函数\n     * @param {number} [limit=20]\n     * @param {number} [offset=0]\n     * @returns {Promise<Record<string, string>[]>}\n     */\n    async listFunctions(limit = 20, offset = 0) {\n        // 获取Function 环境配置\n        const { namespace } = this.getFunctionConfig();\n        const res = await this.scfService.request('ListFunctions', {\n            Namespace: namespace,\n            Limit: limit,\n            Offset: offset\n        });\n        const { Functions = [] } = res;\n        const data = [];\n        Functions.forEach(func => {\n            const { FunctionId, FunctionName, Runtime, AddTime, ModTime, Status } = func;\n            data.push({\n                FunctionId,\n                FunctionName,\n                Runtime,\n                AddTime,\n                ModTime,\n                Status\n            });\n        });\n        return data;\n    }\n    /**\n     * 删除云函数\n     * @param {string} name 云函数名称\n     * @returns {Promise<IResponseInfo>}\n     */\n    async deleteFunction(name) {\n        const { namespace } = this.getFunctionConfig();\n        return this.scfService.request('DeleteFunction', {\n            FunctionName: name,\n            Namespace: namespace\n        });\n    }\n    /**\n     * 获取云函数详细信息\n     * @param {string} name 云函数名称\n     * @returns {Promise<Record<string, string>>}\n     */\n    async getFunctionDetail(name, codeSecret) {\n        const { namespace } = this.getFunctionConfig();\n        const params = {\n            FunctionName: name,\n            Namespace: namespace,\n            ShowCode: 'TRUE'\n        };\n        if (codeSecret) {\n            params.CodeSecret = codeSecret;\n        }\n        const data = await this.scfService.request('GetFunction', params);\n        // 解析 VPC 配置\n        const { VpcId = '', SubnetId = '' } = data.VpcConfig || {};\n        if (VpcId && SubnetId) {\n            try {\n                const vpcs = await this.getVpcs();\n                const subnets = await this.getSubnets(VpcId);\n                const vpc = vpcs.find(item => item.VpcId === VpcId);\n                const subnet = subnets.find(item => item.SubnetId === SubnetId);\n                data.VpcConfig = {\n                    vpc,\n                    subnet\n                };\n            }\n            catch (e) {\n                data.VpcConfig = {\n                    vpc: '',\n                    subnet: ''\n                };\n            }\n        }\n        return data;\n    }\n    /**\n     * 获取函数日志\n     * @param {{\n     *         name: string\n     *         offset: number\n     *         limit: number\n     *         order: string\n     *         orderBy: string\n     *         startTime: string\n     *         endTime: string\n     *         requestId: string\n     *     }} options\n     * @returns {Promise<IFunctionLogRes>}\n     */\n    async getFunctionLogs(options) {\n        const { name, offset = 0, limit = 10, order, orderBy, startTime, endTime, requestId } = options;\n        const { namespace } = this.getFunctionConfig();\n        const params = {\n            Namespace: namespace,\n            FunctionName: name,\n            Offset: offset,\n            Limit: limit,\n            Order: order,\n            OrderBy: orderBy,\n            StartTime: startTime,\n            EndTime: endTime,\n            FunctionRequestId: requestId\n        };\n        const res = await this.scfService.request('GetFunctionLogs', params);\n        return res;\n    }\n    /**\n     * 更新云函数配置\n     * @param {ICloudFunction} func 云函数配置\n     * @returns {Promise<IResponseInfo>}\n     */\n    async updateFunctionConfig(func) {\n        var _a, _b, _c, _d, _e;\n        const { namespace } = this.getFunctionConfig();\n        const envVariables = Object.keys(func.envVariables || {}).map(key => ({\n            Key: key,\n            Value: func.envVariables[key]\n        }));\n        // 当不存在 L5 配置时，不修改 L5 状态，否则根据 true/false 进行修改\n        const l5Enable = typeof func.l5 === 'undefined' ? null : func.l5 ? 'TRUE' : 'FALSE';\n        const params = {\n            FunctionName: func.name,\n            Namespace: namespace,\n            L5Enable: l5Enable\n        };\n        // 修复参数存在 undefined 字段时，会出现鉴权失败的情况\n        // Environment 为覆盖式修改，不保留已有字段\n        envVariables.length && (params.Environment = { Variables: envVariables });\n        // 不设默认超时时间，防止覆盖已有配置\n        func.timeout && (params.Timeout = func.timeout);\n        // 运行时\n        func.runtime && (params.Runtime = func.runtime);\n        if (((_a = func === null || func === void 0 ? void 0 : func.vpc) === null || _a === void 0 ? void 0 : _a.subnetId) !== undefined && ((_b = func === null || func === void 0 ? void 0 : func.vpc) === null || _b === void 0 ? void 0 : _b.vpcId) !== undefined) {\n            // VPC 网络\n            params.VpcConfig = {\n                SubnetId: (_c = func === null || func === void 0 ? void 0 : func.vpc) === null || _c === void 0 ? void 0 : _c.subnetId,\n                VpcId: (_d = func === null || func === void 0 ? void 0 : func.vpc) === null || _d === void 0 ? void 0 : _d.vpcId\n            };\n        }\n        // 内存\n        func.memorySize && (params.MemorySize = func.memorySize);\n        // Node 函数默认安装依赖\n        isNodeFunction(func.runtime) && (params.InstallDependency = 'TRUE');\n        // 是否安装依赖，选项可以覆盖\n        if (typeof func.installDependency !== 'undefined') {\n            params.InstallDependency = func.installDependency ? 'TRUE' : 'FALSE';\n        }\n        // 函数层\n        if ((_e = func === null || func === void 0 ? void 0 : func.layers) === null || _e === void 0 ? void 0 : _e.length) {\n            const transformLayers = func.layers.map(item => ({\n                LayerName: item.name,\n                LayerVersion: item.version\n            }));\n            params.Layers = transformLayers;\n        }\n        return this.scfService.request('UpdateFunctionConfiguration', params);\n    }\n    /**\n     *\n     * @param {IUpdateFunctionCodeParam} funcParam\n     * @returns {Promise<IResponseInfo>}\n     * @memberof FunctionService\n     */\n    async updateFunctionCode(funcParam) {\n        const { func, functionRootPath, base64Code, codeSecret, functionPath } = funcParam;\n        const funcName = func.name;\n        const { namespace } = this.getFunctionConfig();\n        let installDependency;\n        // Node 函数默认安装依赖\n        installDependency = isNodeFunction(func.runtime) ? 'TRUE' : 'FALSE';\n        // 是否安装依赖，选项可以覆盖\n        if (typeof func.installDependency !== 'undefined') {\n            installDependency = func.installDependency ? 'TRUE' : 'FALSE';\n        }\n        const codeParams = await this.getCodeParams({\n            func,\n            functionPath,\n            functionRootPath,\n            base64Code\n        }, installDependency);\n        const params = Object.assign({ FunctionName: funcName, Namespace: namespace, Handler: func.handler || 'index.main', InstallDependency: installDependency }, codeParams);\n        if (codeSecret) {\n            params.CodeSecret = codeSecret;\n        }\n        try {\n            // 等待函数状态正常\n            await this.waitFunctionActive(funcName, codeSecret);\n            // 更新云函数代码\n            const res = await this.scfService.request('UpdateFunctionCode', params);\n            if (installDependency && func.isWaitInstall === true) {\n                await this.waitFunctionActive(funcName, codeSecret);\n            }\n            return res;\n        }\n        catch (e) {\n            throw new error_1.CloudBaseError(`[${funcName}] 函数代码更新失败： ${e.message}`, {\n                code: e.code\n            });\n        }\n    }\n    /**\n     * 调用云函数\n     * @param {string} name 云函数名称\n     * @param {Record<string, any>} params 调用函数传入参数\n     * @returns {Promise<IFunctionInvokeRes>}\n     */\n    async invokeFunction(name, params) {\n        const { namespace } = this.getFunctionConfig();\n        const _params = {\n            FunctionName: name,\n            Namespace: namespace,\n            LogType: 'Tail'\n        };\n        if (params) {\n            _params.ClientContext = JSON.stringify(params);\n        }\n        try {\n            const { RequestId, Result } = await this.scfService.request('Invoke', _params);\n            return Object.assign({ RequestId }, Result);\n        }\n        catch (e) {\n            throw new error_1.CloudBaseError(`[${name}] 调用失败：\\n${e.message}`);\n        }\n    }\n    /**\n     * 复制云函数\n     * @param {string} name 云函数名称\n     * @param {string} newFunctionName 新的云函数名称\n     * @param {string} targetEnvId 目标环境 Id\n     * @param {boolean} [force=false] 是否覆盖同名云函数\n     * @returns {Promise<IResponseInfo>}\n     */\n    /* eslint-disable-next-line */\n    async copyFunction(name, newFunctionName, targetEnvId, force = false) {\n        const { namespace } = this.getFunctionConfig();\n        if (!namespace || !name || !newFunctionName) {\n            throw new error_1.CloudBaseError('参数缺失');\n        }\n        return this.scfService.request('CopyFunction', {\n            FunctionName: name,\n            NewFunctionName: newFunctionName,\n            Namespace: namespace,\n            TargetNamespace: targetEnvId || namespace,\n            Override: force ? true : false\n        });\n    }\n    /**\n     * 创建云函数触发器\n     * @param {string} name 云函数名称\n     * @param {ICloudFunctionTrigger[]} triggers 云函数触发器配置\n     * @returns {Promise<IResponseInfo>}\n     */\n    async createFunctionTriggers(name, triggers = []) {\n        if (!triggers || !triggers.length)\n            return null;\n        const { namespace } = this.getFunctionConfig();\n        const parsedTriggers = triggers.map(item => {\n            if (item.type !== 'timer') {\n                throw new error_1.CloudBaseError(`不支持的触发器类型 [${item.type}]，目前仅支持定时触发器（timer）！`);\n            }\n            return {\n                TriggerName: item.name,\n                Type: item.type,\n                TriggerDesc: item.config\n            };\n        });\n        return this.scfService.request('BatchCreateTrigger', {\n            FunctionName: name,\n            Namespace: namespace,\n            Triggers: JSON.stringify(parsedTriggers),\n            Count: parsedTriggers.length\n        });\n    }\n    /**\n     * 删除云函数触发器\n     * @param {string} name 云函数名称\n     * @param {string} triggerName 云函数触发器名称\n     * @returns {Promise<IResponseInfo>}\n     */\n    async deleteFunctionTrigger(name, triggerName) {\n        const { namespace } = this.getFunctionConfig();\n        return this.scfService.request('DeleteTrigger', {\n            FunctionName: name,\n            Namespace: namespace,\n            TriggerName: triggerName,\n            Type: 'timer'\n        });\n    }\n    /**\n     * 获取云函数代码下载 链接\n     * @param {string} functionName\n     * @param {string} [codeSecret]\n     * @returns {Promise<IFunctionDownloadUrlRes>}\n     * @memberof FunctionService\n     */\n    async getFunctionDownloadUrl(functionName, codeSecret) {\n        const { namespace } = this.getFunctionConfig();\n        const params = {\n            FunctionName: functionName,\n            Namespace: namespace\n        };\n        if (codeSecret) {\n            params.CodeSecret = codeSecret;\n        }\n        try {\n            const { Url, CodeSha256, RequestId } = await this.scfService.request('GetFunctionAddress', params);\n            return { Url, RequestId, CodeSha256 };\n        }\n        catch (e) {\n            throw new error_1.CloudBaseError(`[${functionName}] 获取函数代码下载链接失败：\\n${e.message}`);\n        }\n    }\n    // 创建文件层版本\n    async createLayer(options) {\n        const { env } = this.getFunctionConfig();\n        const { contentPath = '', name, base64Content = '', runtimes = [], description = '', licenseInfo = '' } = options;\n        let base64;\n        if (base64Content) {\n            base64 = base64Content;\n        }\n        else if (utils_1.isDirectory(contentPath)) {\n            // 压缩文件夹\n            const dirName = path_1.default.parse(contentPath).name;\n            const dest = path_1.default.join(process.cwd(), `temp-${dirName}.zip`);\n            // ZIP 文件存在，删除 ZIP 文件\n            if (utils_1.checkFullAccess(dest)) {\n                utils_1.delSync(dest);\n            }\n            await utils_1.compressToZip({\n                dirPath: contentPath,\n                outputPath: dest\n            });\n            // 转换成 base64\n            const fileBuffer = await fs_1.default.promises.readFile(dest);\n            base64 = fileBuffer.toString('base64');\n            utils_1.delSync(dest);\n        }\n        else {\n            const fileType = path_1.default.extname(contentPath);\n            if (fileType !== '.zip') {\n                throw new error_1.CloudBaseError('文件类型不正确，目前只支持 ZIP 文件！');\n            }\n            const fileBuffer = await fs_1.default.promises.readFile(contentPath);\n            base64 = fileBuffer.toString('base64');\n        }\n        return this.scfService.request('PublishLayerVersion', {\n            LayerName: name,\n            CompatibleRuntimes: runtimes,\n            Content: {\n                // 最大支持 20M\n                ZipFile: base64\n            },\n            Description: description,\n            LicenseInfo: licenseInfo,\n            Src: `TCB_${env}`\n        });\n    }\n    // 删除文件层版本\n    async deleteLayerVersion(options) {\n        const { name, version } = options;\n        return this.scfService.request('DeleteLayerVersion', {\n            LayerName: name,\n            LayerVersion: version\n        });\n    }\n    // 获取层版本列表\n    async listLayerVersions(options) {\n        const { name, runtimes } = options;\n        let param = {\n            LayerName: name\n        };\n        if (runtimes === null || runtimes === void 0 ? void 0 : runtimes.length) {\n            param.CompatibleRuntime = runtimes;\n        }\n        return this.scfService.request('ListLayerVersions', param);\n    }\n    // 获取文件层列表\n    async listLayers(options) {\n        const { env } = this.getFunctionConfig();\n        const { limit = 20, offset = 0, runtime, searchKey } = options;\n        let param = {\n            Limit: limit,\n            Offset: offset,\n            SearchKey: searchKey,\n            SearchSrc: `TCB_${env}`\n        };\n        if (runtime) {\n            param.CompatibleRuntime = runtime;\n        }\n        return this.scfService.request('ListLayers', param);\n    }\n    // 获取层版本详细信息\n    async getLayerVersion(options) {\n        const { name, version } = options;\n        return this.scfService.request('GetLayerVersion', {\n            LayerName: name,\n            LayerVersion: version\n        });\n    }\n    /**\n     * 设置预置并发\n     * @private\n     * @param {IProvisionedConcurrencyConfig} concurrencyConfig\n     * @returns\n     * @memberof FunctionService\n     */\n    async setProvisionedConcurrencyConfig(concurrencyConfig) {\n        const { namespace } = this.getFunctionConfig();\n        const { functionName: FunctionName, qualifier: Qualifier, versionProvisionedConcurrencyNum: VersionProvisionedConcurrencyNum } = concurrencyConfig;\n        return this.scfService.request('PutProvisionedConcurrencyConfig', {\n            FunctionName,\n            Qualifier,\n            VersionProvisionedConcurrencyNum,\n            Namespace: namespace\n        });\n    }\n    /**\n     * 获取函数预置并发详情\n     * @private\n     * @param {IGetProvisionedConcurrencyConfig} concurrencyConfig\n     * @returns {Promise<IGetProvisionedConcurrencyRes>}\n     * @memberof FunctionService\n     */\n    async getProvisionedConcurrencyConfig(concurrencyConfig) {\n        const { namespace } = this.getFunctionConfig();\n        const { functionName: FunctionName, qualifier: Qualifier } = concurrencyConfig;\n        return this.scfService.request('GetProvisionedConcurrencyConfig', {\n            FunctionName,\n            Qualifier,\n            Namespace: namespace\n        });\n    }\n    /**\n     * 删除预置并发\n     * @private\n     * @param {IGetProvisionedConcurrencyConfig} concurrencyConfig\n     * @returns {Promise<IResponseInfo>}\n     * @memberof FunctionService\n     */\n    async deleteProvisionedConcurrencyConfig(concurrencyConfig) {\n        const { namespace } = this.getFunctionConfig();\n        const { functionName: FunctionName, qualifier: Qualifier } = concurrencyConfig;\n        return this.scfService.request('DeleteProvisionedConcurrencyConfig', {\n            FunctionName,\n            Qualifier,\n            Namespace: namespace\n        });\n    }\n    /**\n     * 发布新版本\n     * @param {IPublishVersionParams} publishParams\n     * @returns {Promise<IPublishVersionRes>}\n     * @memberof FunctionService\n     */\n    async publishVersion(publishParams) {\n        const { namespace } = this.getFunctionConfig();\n        const { functionName: FunctionName, description: Description } = publishParams;\n        return this.scfService.request('PublishVersion', {\n            FunctionName,\n            Description,\n            Namespace: namespace\n        });\n    }\n    /**\n     * 查询函数版本详情\n     * @param {IListFunctionVersionParams} listVersionParams\n     * @returns {Promise<IFunctionVersionsRes>}\n     * @memberof FunctionService\n     */\n    async listVersionByFunction(listVersionParams) {\n        const { namespace } = this.getFunctionConfig();\n        const { functionName: FunctionName, offset: Offset, limit: Limit, order: Order, orderBy: OrderBy } = listVersionParams;\n        return this.scfService.request('ListVersionByFunction', {\n            FunctionName,\n            Namespace: namespace,\n            Offset,\n            Limit,\n            Order,\n            OrderBy\n        });\n    }\n    /**\n     *\n     * @param {IUpdateFunctionAliasConfig} updateVersionConfigParams\n     * @returns {Promise<IResponseInfo>}\n     * @memberof FunctionService\n     */\n    async updateFunctionAliasConfig(updateVersionConfigParams) {\n        const { namespace } = this.getFunctionConfig();\n        const { functionName: FunctionName, name: Name, functionVersion: FunctionVersion, routingConfig: RoutingConfig, description: Description } = updateVersionConfigParams;\n        return this.scfService.request('UpdateAlias', {\n            FunctionName,\n            Name,\n            Namespace: namespace,\n            FunctionVersion,\n            RoutingConfig,\n            Description\n        });\n    }\n    /**\n     * 查询函数别名详情\n     * @param {IGetFunctionAlias} params\n     * @returns {Promise<IGetFunctionAliasRes>}\n     * @memberof FunctionService\n     */\n    async getFunctionAlias(params) {\n        const { namespace } = this.getFunctionConfig();\n        const { functionName: FunctionName, name: Name } = params;\n        return this.scfService.request('GetAlias', {\n            FunctionName,\n            Name,\n            Namespace: namespace\n        });\n    }\n    async createAccessPath(name, path) {\n        const access = this.environment.getAccessService();\n        try {\n            await access.createAccess({\n                name,\n                path\n            });\n        }\n        catch (e) {\n            // 当 Path 存在时，校验 Path 绑定的函数是不是当前函数\n            if (e.code === 'InvalidParameter.APICreated') {\n                const { APISet } = await access.getAccessList({\n                    name\n                });\n                if ((APISet === null || APISet === void 0 ? void 0 : APISet[0].Name) !== name || (APISet === null || APISet === void 0 ? void 0 : APISet[0].Type) !== 1) {\n                    throw e;\n                }\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n    async getCodeParams(options, installDependency) {\n        const { func, functionPath, functionRootPath, base64Code } = options;\n        // 20MB\n        const BIG_LENGTH = 167772160;\n        if ((base64Code === null || base64Code === void 0 ? void 0 : base64Code.length) > BIG_LENGTH) {\n            throw new error_1.CloudBaseError('base64 不能大于 20 MB');\n        }\n        if (base64Code === null || base64Code === void 0 ? void 0 : base64Code.length) {\n            return {\n                ZipFile: base64Code\n            };\n        }\n        const codeType = func.runtime === 'Java8' ? packer_1.CodeType.JavaFile : packer_1.CodeType.File;\n        // 云端安装依赖，自动忽略 node_modules 目录\n        const ignore = installDependency === 'TRUE'\n            ? ['node_modules/**/*', 'node_modules', ...(func.ignore || [])]\n            : [...(func.ignore || [])];\n        const packer = new packer_1.FunctionPacker({\n            ignore,\n            codeType,\n            functionPath,\n            name: func.name,\n            root: functionRootPath\n        });\n        await packer.build();\n        // 通过云 API 传输的代码大小不能超过 50MB\n        const reachMax = await packer.isReachMaxSize();\n        if (reachMax) {\n            throw new error_1.CloudBaseError('函数代码不能大于 50MB');\n        }\n        const base64 = await packer.getBase64Code();\n        if (!(base64 === null || base64 === void 0 ? void 0 : base64.length)) {\n            throw new error_1.CloudBaseError('文件不能为空');\n        }\n        return {\n            ZipFile: base64\n        };\n    }\n    // 获取 COS 临时信息\n    async getTempCosInfo(name) {\n        const { env, appId } = await this.getFunctionConfig();\n        /**\n         * Response:\n         * Date: \"2020-03-18\"\n         * RequestId: \"91876f56-7cd3-42bb-bc32-b74df5d0516e\"\n         * Sign: \"Gc8QvXD50dx7yBfsl2yEYFwIL45hPTEyNTM2NjU4MTkm\n         */\n        return this.scfService.request('GetTempCosInfo', {\n            ObjectPath: `${appId}/${env}/${name}.zip\"`\n        });\n    }\n    async retryCreateTrigger(name, triggers, count = 0) {\n        try {\n            const res = await this.createFunctionTriggers(name, triggers);\n            return res;\n        }\n        catch (e) {\n            if (count < 3) {\n                await utils_1.sleep(500);\n                const res = await this.retryCreateTrigger(name, triggers, count + 1);\n                return res;\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n    /**\n     * 获取函数配置信息\n     * @private\n     * @returns\n     * @memberof FunctionService\n     */\n    getFunctionConfig() {\n        var _a;\n        const envConfig = this.environment.lazyEnvironmentConfig;\n        const namespace = envConfig.Functions[0].Namespace;\n        const appId = (_a = envConfig.Storages[0]) === null || _a === void 0 ? void 0 : _a.AppId;\n        const { proxy } = this.environment.cloudBaseContext;\n        return {\n            proxy,\n            appId,\n            namespace,\n            env: envConfig.EnvId\n        };\n    }\n    /**\n     * 获取 vpc 信息\n     * @returns\n     */\n    async getVpcs() {\n        const { VpcSet } = await this.vpcService.request('DescribeVpcs');\n        return VpcSet;\n    }\n    /**\n     * 获取子网\n     * @param {string} vpcId\n     * @returns\n     */\n    async getSubnets(vpcId) {\n        const { SubnetSet } = await this.vpcService.request('DescribeSubnets', {\n            Filters: [\n                {\n                    Name: 'vpc-id',\n                    Values: [vpcId]\n                }\n            ]\n        });\n        return SubnetSet;\n    }\n    // 检查函数状态，部分操作在函数更新中时不可进行\n    async waitFunctionActive(funcName, codeSecret) {\n        let ticker;\n        let timer;\n        let resolved;\n        return new Promise((resolve, reject) => {\n            // 超时时间 5 分钟\n            timer = setTimeout(() => {\n                clearInterval(ticker);\n                if (!resolved) {\n                    reject(new error_1.CloudBaseError('函数状态异常，检查超时'));\n                }\n            }, 300000);\n            ticker = setInterval(async () => {\n                try {\n                    const { Status } = await this.getFunctionDetail(funcName, codeSecret);\n                    // 更新中\n                    if (Status === constant_1.SCF_STATUS.CREATING || Status === constant_1.SCF_STATUS.UPDATING)\n                        return;\n                    // 创建失败\n                    if (Status === constant_1.SCF_STATUS.CREATE_FAILED) {\n                        throw new error_1.CloudBaseError('云函数创建失败');\n                    }\n                    // 函数状态正常\n                    clearInterval(ticker);\n                    clearTimeout(timer);\n                    resolve();\n                }\n                catch (e) {\n                    clearInterval(ticker);\n                    clearTimeout(timer);\n                    reject(e);\n                }\n                resolved = true;\n            }, 1000);\n        });\n    }\n}\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"updateFunctionIncrementalCode\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"createFunction\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"getFunctionList\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"listFunctions\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"deleteFunction\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"getFunctionDetail\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"getFunctionLogs\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"updateFunctionConfig\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"updateFunctionCode\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"invokeFunction\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"copyFunction\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"createFunctionTriggers\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"deleteFunctionTrigger\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"getFunctionDownloadUrl\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"createLayer\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"deleteLayerVersion\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"listLayerVersions\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"listLayers\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"getLayerVersion\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"setProvisionedConcurrencyConfig\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"getProvisionedConcurrencyConfig\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"deleteProvisionedConcurrencyConfig\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"publishVersion\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"listVersionByFunction\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"updateFunctionAliasConfig\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"getFunctionAlias\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"createAccessPath\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"getCodeParams\", null);\n__decorate([\n    utils_1.preLazy()\n], FunctionService.prototype, \"getTempCosInfo\", null);\nexports.FunctionService = FunctionService;\n","\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FunctionPacker = exports.CodeType = exports.API_MAX_SIZE = exports.BIG_FILE_SIZE = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst del_1 = __importDefault(require(\"del\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst make_dir_1 = __importDefault(require(\"make-dir\"));\nconst util_1 = __importDefault(require(\"util\"));\nconst utils_1 = require(\"../utils\");\nconst error_1 = require(\"../error\");\n// 10 MB\nexports.BIG_FILE_SIZE = 10485760;\nexports.API_MAX_SIZE = 52428800;\nvar CodeType;\n(function (CodeType) {\n    CodeType[CodeType[\"File\"] = 0] = \"File\";\n    CodeType[CodeType[\"JavaFile\"] = 1] = \"JavaFile\";\n})(CodeType = exports.CodeType || (exports.CodeType = {}));\nconst TEMPDIR_NAME = '.cloudbase_temp';\n/**\n * 将函数代码转换成 Base64 编码\n * 普通文件：Node，PHP\n * Java 文件：Jar，ZIP\n */\nclass FunctionPacker {\n    constructor(options) {\n        const { root, name, codeType, ignore, incrementalPath, functionPath } = options;\n        this.name = name;\n        this.ignore = ignore;\n        this.codeType = codeType;\n        this.incrementalPath = incrementalPath;\n        this.funcPath = functionPath ? functionPath : path_1.default.resolve(root, name);\n        // 每个函数采用不同的文件夹\n        this.tmpPath = root\n            ? path_1.default.join(root, `${TEMPDIR_NAME}_${name}`)\n            : path_1.default.join(process.cwd(), `${TEMPDIR_NAME}_${name}`);\n    }\n    async compressFiles() {\n        utils_1.checkFullAccess(this.funcPath, true);\n        // 清除原打包文件\n        this.clean();\n        // 确保目标路径存在\n        await make_dir_1.default(this.tmpPath);\n        // 生成 name.zip 文件\n        this.zipFilePath = path_1.default.resolve(this.tmpPath, `${this.name}.zip`);\n        const zipOption = {\n            dirPath: this.funcPath,\n            outputPath: this.zipFilePath,\n            ignore: this.ignore\n        };\n        if (this.incrementalPath) {\n            zipOption.pattern = this.incrementalPath;\n        }\n        await utils_1.compressToZip(zipOption);\n    }\n    // 获取 Java 代码\n    getJavaFile() {\n        const { funcPath } = this;\n        // funcPath 可能以 .jar 或 .zip 结尾\n        const filePath = funcPath.replace(/\\.jar$|\\.zip$/g, '');\n        // Java 代码为 jar 或 zip 包\n        const jarExist = utils_1.checkFullAccess(`${filePath}.jar`);\n        const zipExist = utils_1.checkFullAccess(`${filePath}.zip`);\n        if (!jarExist && !zipExist) {\n            throw new error_1.CloudBaseError('未找到部署函数的 Jar 或者 ZIP 格式文件！');\n        }\n        this.zipFilePath = jarExist ? `${filePath}.jar` : `${filePath}.zip`;\n    }\n    async build() {\n        if (this.codeType === CodeType.JavaFile) {\n            try {\n                await this.getJavaFile();\n            }\n            catch (e) {\n                this.clean();\n                throw new error_1.CloudBaseError(`函数代码打包失败：${e.message}`, {\n                    code: e.code\n                });\n            }\n        }\n        if (this.codeType === CodeType.File) {\n            try {\n                await this.compressFiles();\n            }\n            catch (e) {\n                this.clean();\n                throw new error_1.CloudBaseError(`函数代码打包失败：${e.message}`, {\n                    code: e.code\n                });\n            }\n        }\n    }\n    // 函数压缩后的代码大于 10M，建议使用 COS 上传（当前暂不支持）\n    async isBigFile() {\n        if (!this.zipFilePath) {\n            await this.build();\n        }\n        const promiseStat = util_1.default.promisify(fs_1.default.stat);\n        const fileStats = await promiseStat(this.zipFilePath);\n        return fileStats.size > exports.BIG_FILE_SIZE;\n    }\n    // API 最大 50MB\n    async isReachMaxSize() {\n        if (!this.zipFilePath) {\n            await this.build();\n        }\n        const promiseStat = util_1.default.promisify(fs_1.default.stat);\n        const fileStats = await promiseStat(this.zipFilePath);\n        return fileStats.size > exports.API_MAX_SIZE;\n    }\n    async getBase64Code() {\n        // 将 zip 文件转换成 base64\n        const base64 = fs_1.default.readFileSync(this.zipFilePath).toString('base64');\n        // 非 Java 函数清除打包文件\n        if (this.codeType !== CodeType.JavaFile) {\n            await this.clean();\n        }\n        return base64;\n    }\n    async clean() {\n        // allow deleting the current working directory and outside\n        this.tmpPath && del_1.default.sync([this.tmpPath], { force: true });\n        return;\n    }\n}\nexports.FunctionPacker = FunctionPacker;\n","\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StorageService = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst util_1 = __importDefault(require(\"util\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst make_dir_1 = __importDefault(require(\"make-dir\"));\nconst walkdir_1 = __importDefault(require(\"walkdir\"));\nconst micromatch_1 = __importDefault(require(\"micromatch\"));\nconst cos_nodejs_sdk_v5_1 = __importDefault(require(\"cos-nodejs-sdk-v5\"));\nconst utils_1 = require(\"../utils\");\nconst error_1 = require(\"../error\");\nconst parallel_1 = require(\"../utils/parallel\");\nconst BIG_FILE_SIZE = 5242880; // 5MB 1024*1024*5\nclass StorageService {\n    constructor(environment) {\n        this.environment = environment;\n        this.tcbService = new utils_1.CloudService(environment.cloudBaseContext, 'tcb', '2018-06-08');\n    }\n    /**\n     * 上传文件\n     * localPath 为文件夹时，会尝试在文件夹中寻找 cloudPath 中的文件名\n     * @param {string} localPath 本地文件的绝对路径\n     * @param {string} cloudPath 云端文件路径，如 img/test.png\n     * @returns {Promise<any>}\n     */\n    async uploadFile(options) {\n        const { localPath, cloudPath = '', onProgress } = options;\n        const { bucket, region } = this.getStorageConfig();\n        return this.uploadFileCustom({\n            localPath,\n            cloudPath,\n            bucket,\n            region,\n            onProgress\n        });\n    }\n    /**\n     * 批量上传文件，默认并发 5\n     * @param options\n     */\n    async uploadFiles(options) {\n        const { files, onProgress, parallel, onFileFinish, ignore, retryCount, retryInterval } = options;\n        const { bucket, region } = this.getStorageConfig();\n        return this.uploadFilesCustom({\n            files,\n            bucket,\n            region,\n            ignore,\n            parallel,\n            onProgress,\n            onFileFinish,\n            retryCount,\n            retryInterval\n        });\n    }\n    /**\n     * 上传文件，支持自定义 Bucket 和 Region\n     * @param {string} localPath\n     * @param {string} cloudPath\n     * @param {string} bucket\n     * @param {string} region\n     */\n    async uploadFileCustom(options) {\n        const { localPath, cloudPath, bucket, region, onProgress, fileId = true } = options;\n        let localFilePath = '';\n        let resolveLocalPath = path_1.default.resolve(localPath);\n        utils_1.checkFullAccess(resolveLocalPath, true);\n        // 如果 localPath 是一个文件夹，尝试在文件下寻找 cloudPath 中的文件\n        const fileStats = fs_1.default.statSync(resolveLocalPath);\n        if (fileStats.isDirectory()) {\n            const fileName = path_1.default.parse(cloudPath).base;\n            const attemptFilePath = path_1.default.join(localPath, fileName);\n            if (utils_1.checkFullAccess(attemptFilePath)) {\n                localFilePath = path_1.default.resolve(attemptFilePath);\n            }\n        }\n        else {\n            localFilePath = resolveLocalPath;\n        }\n        if (!localFilePath) {\n            throw new error_1.CloudBaseError('本地文件不存在！');\n        }\n        const cos = this.getCos();\n        const putObject = util_1.default.promisify(cos.putObject).bind(cos);\n        const sliceUploadFile = util_1.default.promisify(cos.sliceUploadFile).bind(cos);\n        let cosFileId;\n        // 针对静态托管，fileId 不是必须的\n        if (fileId) {\n            // 针对文件存储，cosFileId 是必须的，区分上传人员，否则无法获取下载连接\n            const res = await this.getUploadMetadata(cloudPath);\n            cosFileId = res.cosFileId;\n        }\n        let res;\n        // 小文件，直接上传\n        if (fileStats.size < BIG_FILE_SIZE) {\n            res = await putObject({\n                onProgress,\n                Bucket: bucket,\n                Region: region,\n                Key: cloudPath,\n                StorageClass: 'STANDARD',\n                ContentLength: fileStats.size,\n                Body: fs_1.default.createReadStream(localFilePath),\n                'x-cos-meta-fileid': cosFileId\n            });\n        }\n        else {\n            // 大文件，分块上传\n            res = await sliceUploadFile({\n                Bucket: bucket,\n                Region: region,\n                Key: cloudPath,\n                FilePath: localFilePath,\n                StorageClass: 'STANDARD',\n                AsyncLimit: 3,\n                onProgress,\n                'x-cos-meta-fileid': cosFileId\n            });\n        }\n        if (res.statusCode !== 200) {\n            throw new error_1.CloudBaseError(`上传文件错误：${JSON.stringify(res)}`);\n        }\n        return res;\n    }\n    /**\n     * 上传文件夹\n     * @param {string} localPath 本地文件夹路径\n     * @param {string} cloudPath 云端文件夹\n     * @param {number} parallel 并发量\n     * @param {number} retryCount 重试次数\n     * @param {number} retryInterval 重试时间间隔(毫秒)\n     * @param {(string | string[])} ignore\n     * @param {(string | string[])} ignore\n     * @returns {Promise<void>}\n     */\n    async uploadDirectory(options) {\n        const { localPath, cloudPath = '', ignore, onProgress, onFileFinish, parallel, retryCount, retryInterval } = options;\n        // 此处不检查路径是否存在\n        // 绝对路径 /var/blog/xxxx\n        const { bucket, region } = this.getStorageConfig();\n        return this.uploadDirectoryCustom({\n            localPath,\n            cloudPath,\n            parallel,\n            retryCount,\n            retryInterval,\n            bucket,\n            region,\n            ignore,\n            onProgress,\n            onFileFinish\n        });\n    }\n    /**\n     * 上传文件夹，支持自定义 Region 和 Bucket\n     * @param {string} localPath\n     * @param {string} cloudPath\n     * @param {number} parallel\n     * @param {number} retryCount\n     * @param {number} retryInterval\n     * @param {string} bucket\n     * @param {string} region\n     * @param {IOptions} options\n     * @returns {Promise<void>}\n     */\n    async uploadDirectoryCustom(options) {\n        const { localPath, cloudPath, bucket, region, onProgress, onFileFinish, ignore, fileId = true, parallel = 20, retryCount = 0, retryInterval = 500 } = options;\n        // 此处不检查路径是否存在\n        // 绝对路径 /var/blog/xxxx\n        const resolvePath = path_1.default.resolve(localPath);\n        // 在路径结尾加上 '/'\n        const resolveLocalPath = path_1.default.join(resolvePath, path_1.default.sep);\n        const filePaths = await this.walkLocalDir(resolveLocalPath, ignore);\n        if (!filePaths || !filePaths.length) {\n            return;\n        }\n        const fileStatsList = filePaths.map(filePath => {\n            // 处理 windows 路径\n            const fileKeyPath = filePath.replace(resolveLocalPath, '').replace(/\\\\/g, '/');\n            // 解析 cloudPath\n            let cloudFileKey = path_1.default.join(cloudPath, fileKeyPath).replace(/\\\\/g, '/');\n            if (utils_1.isDirectory(filePath)) {\n                cloudFileKey = this.getCloudKey(cloudFileKey);\n                return {\n                    filePath,\n                    cloudFileKey,\n                    isDir: true\n                };\n            }\n            else {\n                return {\n                    filePath,\n                    cloudFileKey,\n                    isDir: false\n                };\n            }\n        });\n        // 创建目录请求\n        const creatingDirController = new parallel_1.AsyncTaskParallelController(parallel, 50);\n        const creatingDirTasks = fileStatsList\n            .filter(info => info.isDir)\n            .map(info => () => this.createCloudDirectroyCustom({\n            cloudPath: info.cloudFileKey,\n            bucket,\n            region\n        }));\n        creatingDirController.loadTasks(creatingDirTasks);\n        await creatingDirController.run();\n        // 上传文件对象\n        const tasks = fileStatsList\n            .filter(stats => !stats.isDir)\n            .map(stats => async () => {\n            let cosFileId;\n            if (fileId) {\n                const res = await this.getUploadMetadata(stats.cloudFileKey);\n                cosFileId = res.cosFileId;\n            }\n            return {\n                Bucket: bucket,\n                Region: region,\n                Key: stats.cloudFileKey,\n                FilePath: stats.filePath,\n                'x-cos-meta-fileid': cosFileId\n            };\n        });\n        // 控制请求并发\n        const getMetadataController = new parallel_1.AsyncTaskParallelController(parallel, 50);\n        getMetadataController.loadTasks(tasks);\n        const files = await getMetadataController.run();\n        // 对文件上传进行处理\n        const cos = this.getCos(parallel);\n        const uploadFiles = util_1.default.promisify(cos.uploadFiles).bind(cos);\n        const params = {\n            files,\n            SliceSize: BIG_FILE_SIZE,\n            onProgress,\n            onFileFinish\n        };\n        return this.uploadFilesWithRetry({\n            uploadFiles,\n            options: params,\n            times: retryCount,\n            interval: retryInterval,\n            failedFiles: []\n        });\n    }\n    /**\n     * 批量上传文件\n     * @param options\n     */\n    async uploadFilesCustom(options) {\n        const { files, bucket, region, ignore, onProgress, onFileFinish, fileId = true, parallel = 20, retryCount = 0, retryInterval = 500 } = options;\n        if (!files || !files.length) {\n            return;\n        }\n        let fileList = files\n            .map(item => {\n            const { localPath, cloudPath } = item;\n            return {\n                filePath: localPath,\n                cloudFileKey: cloudPath\n            };\n        })\n            .filter(item => ((ignore === null || ignore === void 0 ? void 0 : ignore.length) ? !micromatch_1.default.isMatch(item.filePath, ignore) : true));\n        // 生成上传文件属性\n        const tasks = fileList.map(stats => async () => {\n            let cosFileId;\n            if (fileId) {\n                const res = await this.getUploadMetadata(stats.cloudFileKey);\n                cosFileId = res.cosFileId;\n            }\n            return {\n                Bucket: bucket,\n                Region: region,\n                Key: stats.cloudFileKey,\n                FilePath: stats.filePath,\n                'x-cos-meta-fileid': cosFileId\n            };\n        });\n        // 控制请求并发\n        const asyncTaskController = new parallel_1.AsyncTaskParallelController(parallel, 50);\n        asyncTaskController.loadTasks(tasks);\n        fileList = await asyncTaskController.run();\n        const cos = this.getCos(parallel);\n        const uploadFiles = util_1.default.promisify(cos.uploadFiles).bind(cos);\n        const params = {\n            files: fileList,\n            SliceSize: BIG_FILE_SIZE,\n            onProgress,\n            onFileFinish\n        };\n        // return uploadFiles({\n        //     onProgress,\n        //     onFileFinish,\n        //     files: fileList,\n        //     SliceSize: BIG_FILE_SIZE\n        // })\n        return this.uploadFilesWithRetry({\n            uploadFiles,\n            options: params,\n            times: retryCount,\n            interval: retryInterval,\n            failedFiles: []\n        });\n    }\n    /**\n     * 创建一个空的文件夹\n     * @param {string} cloudPath\n     */\n    async createCloudDirectroy(cloudPath) {\n        const { bucket, region } = this.getStorageConfig();\n        await this.createCloudDirectroyCustom({\n            cloudPath,\n            bucket,\n            region\n        });\n    }\n    /**\n     * 创建一个空的文件夹，支持自定义 Region 和 Bucket\n     * @param {string} cloudPath\n     * @param {string} bucket\n     * @param {string} region\n     */\n    async createCloudDirectroyCustom(options) {\n        const { cloudPath, bucket, region } = options;\n        const cos = this.getCos();\n        const putObject = util_1.default.promisify(cos.putObject).bind(cos);\n        const dirKey = this.getCloudKey(cloudPath);\n        const res = await putObject({\n            Bucket: bucket,\n            Region: region,\n            Key: dirKey,\n            Body: ''\n        });\n        if (res.statusCode !== 200) {\n            throw new error_1.CloudBaseError(`创建文件夹失败：${JSON.stringify(res)}`);\n        }\n    }\n    /**\n     * 下载文件\n     * @param {string} cloudPath 云端文件路径\n     * @param {string} localPath 文件本地存储路径，文件需指定文件名称\n     * @returns {Promise<NodeJS.ReadableStream>}\n     */\n    async downloadFile(options) {\n        const { cloudPath, localPath } = options;\n        const resolveLocalPath = path_1.default.resolve(localPath);\n        const fileDir = path_1.default.dirname(localPath);\n        utils_1.checkFullAccess(fileDir, true);\n        const urlList = await this.getTemporaryUrl([cloudPath]);\n        const { url } = urlList[0];\n        const { proxy } = await this.environment.getAuthConfig();\n        const res = await utils_1.fetchStream(url, {}, proxy);\n        // localPath 不存在时，返回 ReadableStream\n        if (!localPath) {\n            return res.body;\n        }\n        const dest = fs_1.default.createWriteStream(resolveLocalPath);\n        res.body.pipe(dest);\n        // 写完成后返回\n        return new Promise(resolve => {\n            dest.on('close', () => {\n                // 返回文件地址\n                resolve(resolveLocalPath);\n            });\n        });\n    }\n    /**\n     * 下载文件夹\n     * @param {string} cloudPath 云端文件路径\n     * @param {string} localPath 本地文件夹存储路径\n     * @returns {Promise<(NodeJS.ReadableStream | string)[]>}\n     */\n    async downloadDirectory(options) {\n        const { cloudPath, localPath, parallel = 20 } = options;\n        const resolveLocalPath = path_1.default.resolve(localPath);\n        utils_1.checkFullAccess(resolveLocalPath, true);\n        const cloudDirectoryKey = this.getCloudKey(cloudPath);\n        const files = await this.walkCloudDir(cloudDirectoryKey);\n        const promises = files.map(file => async () => {\n            return this.downloadWithFilePath({ file, cloudDirectoryKey, resolveLocalPath });\n        });\n        const asyncTaskController = new parallel_1.AsyncTaskParallelController(parallel, 50);\n        asyncTaskController.loadTasks(promises);\n        let res = await asyncTaskController.run();\n        const errorIndexArr = [];\n        res.map((item, index) => /Error/gi.test(Object.prototype.toString.call(item)) && errorIndexArr.push(index));\n        // 重试逻辑\n        if (errorIndexArr.length) {\n            const errorFiles = errorIndexArr.map(errorIndex => files[errorIndex]);\n            asyncTaskController.loadTasks(errorFiles.map(file => async () => {\n                return this.downloadWithFilePath({ file, cloudDirectoryKey, resolveLocalPath });\n            }));\n            res = await asyncTaskController.run();\n        }\n        const errorResultArr = this.determineDownLoadResultIsError(res);\n        if (errorResultArr.length) {\n            throw errorResultArr[0];\n        }\n        return res;\n    }\n    /**\n     * 列出文件夹下的文件\n     * @link https://cloud.tencent.com/document/product/436/7734\n     * @param {string} cloudPath 云端文件夹，如果为空字符串，则表示根目录\n     * @returns {Promise<ListFileInfo[]>}\n     */\n    async listDirectoryFiles(cloudPath) {\n        return this.walkCloudDir(cloudPath);\n    }\n    /**\n     * 获取文件临时下载链接\n     * @param {((string | ITempUrlInfo)[])} fileList 文件路径或文件信息数组\n     * @returns {Promise<{ fileId: string; url: string }[]>}\n     */\n    async getTemporaryUrl(fileList) {\n        if (!fileList || !Array.isArray(fileList)) {\n            throw new error_1.CloudBaseError('fileList 必须是非空的数组');\n        }\n        const files = fileList.map(item => {\n            if (typeof item === 'string') {\n                return { cloudPath: item, maxAge: 3600 };\n            }\n            else {\n                return item;\n            }\n        });\n        const invalidData = files.find(item => !item.cloudPath || !item.maxAge || typeof item.cloudPath !== 'string');\n        if (invalidData) {\n            throw new error_1.CloudBaseError(`非法参数：${JSON.stringify(invalidData)}`);\n        }\n        const notExistsFiles = [];\n        const checkFileRequests = files.map(file => (async () => {\n            try {\n                await this.getFileInfo(file.cloudPath);\n            }\n            catch (e) {\n                if (e.statusCode === 404) {\n                    notExistsFiles.push(file.cloudPath);\n                }\n            }\n        })());\n        await Promise.all(checkFileRequests);\n        // 文件路径不存在\n        if (notExistsFiles.length) {\n            throw new error_1.CloudBaseError(`以下文件不存在：${notExistsFiles.join(', ')}`);\n        }\n        const data = files.map(item => ({\n            fileid: this.cloudPathToFileId(item.cloudPath),\n            max_age: item.maxAge\n        }));\n        const config = this.environment.getAuthConfig();\n        const res = await utils_1.cloudBaseRequest({\n            config,\n            params: {\n                file_list: data,\n                action: 'storage.batchGetDownloadUrl'\n            },\n            method: 'POST'\n        });\n        const downloadList = res.data.download_list.map(item => ({\n            url: item.download_url,\n            fileId: item.fileid || item.fileID\n        }));\n        return downloadList;\n    }\n    /**\n     * 删除文件\n     * @param {string[]} cloudPathList 云端文件路径数组\n     * @returns {Promise<void>}\n     */\n    async deleteFile(cloudPathList) {\n        if (!cloudPathList || !Array.isArray(cloudPathList)) {\n            throw new error_1.CloudBaseError('fileList必须是非空的数组');\n        }\n        const hasInvalidFileId = cloudPathList.some(file => !file || typeof file !== 'string');\n        if (hasInvalidFileId) {\n            throw new error_1.CloudBaseError('fileList的元素必须是非空的字符串');\n        }\n        const { bucket, env } = this.getStorageConfig();\n        const fileIdList = cloudPathList.map(filePath => this.cloudPathToFileId(filePath));\n        const config = this.environment.getAuthConfig();\n        const res = await utils_1.cloudBaseRequest({\n            config,\n            params: {\n                action: 'storage.batchDeleteFile',\n                fileid_list: fileIdList\n            },\n            method: 'POST'\n        });\n        const failedList = res.data.delete_list\n            .filter(item => item.code !== 'SUCCESS')\n            .map(item => `${item.fileID} : ${item.code}`);\n        if (failedList.length) {\n            throw new error_1.CloudBaseError(`部分删除文件失败：${JSON.stringify(failedList)}`);\n        }\n    }\n    /**\n     * 删除文件，可以指定 Bucket 和 Region\n     * @param {string[]} cloudPathList\n     * @param {string} bucket\n     * @param {string} region\n     * @returns {Promise<void>}\n     */\n    async deleteFileCustom(cloudPathList, bucket, region) {\n        if (!cloudPathList || !Array.isArray(cloudPathList)) {\n            throw new error_1.CloudBaseError('fileList必须是非空的数组');\n        }\n        const hasInvalidFileId = cloudPathList.some(file => !file || typeof file !== 'string');\n        if (hasInvalidFileId) {\n            throw new error_1.CloudBaseError('fileList的元素必须是非空的字符串');\n        }\n        const cos = this.getCos();\n        const deleteObject = util_1.default.promisify(cos.deleteObject).bind(cos);\n        const promises = cloudPathList.map(async (file) => deleteObject({\n            Bucket: bucket,\n            Region: region,\n            Key: file\n        }));\n        await Promise.all(promises);\n    }\n    /**\n     * 获取文件信息\n     * @param {string} cloudPath 云端文件路径\n     * @returns {Promise<FileInfo>}\n     */\n    async getFileInfo(cloudPath) {\n        const cos = this.getCos();\n        const headObject = util_1.default.promisify(cos.headObject).bind(cos);\n        const { bucket, region } = this.getStorageConfig();\n        const { headers } = await headObject({\n            Bucket: bucket,\n            Region: region,\n            Key: cloudPath\n        });\n        if (!headers) {\n            throw new error_1.CloudBaseError(`[${cloudPath}] 获取文件信息失败`);\n        }\n        // 文件大小 KB\n        const size = Number(Number(headers['content-length']) / 1024).toFixed(2);\n        return {\n            Size: size,\n            Type: headers['content-type'],\n            Date: headers['date'],\n            ETag: headers['etag']\n        };\n    }\n    /**\n     * 删除文件夹\n     * @param {string} cloudPath 云端文件夹路径\n     * @returns {Promise<void>}\n     */\n    async deleteDirectory(cloudPath) {\n        const { bucket, region } = this.getStorageConfig();\n        return this.deleteDirectoryCustom({\n            cloudPath,\n            bucket,\n            region\n        });\n    }\n    /**\n     * 删除文件，可以指定 bucket 和 region\n     * @param {string} cloudPath\n     * @param {string} bucket\n     * @param {string} region\n     * @returns {Promise<void>}\n     */\n    async deleteDirectoryCustom(options) {\n        const { cloudPath, bucket, region } = options;\n        const key = this.getCloudKey(cloudPath);\n        const cos = this.getCos();\n        const deleteMultipleObject = util_1.default.promisify(cos.deleteMultipleObject).bind(cos);\n        // 遍历获取全部文件\n        const files = await this.walkCloudDirCustom({\n            bucket,\n            region,\n            prefix: key\n        });\n        // 文件为空时，不能调用删除接口\n        if (!files.length) {\n            return {\n                Deleted: [],\n                Error: []\n            };\n        }\n        // COS 接口最大一次删除 1000 个 Key\n        // 将数组切分为 500 个文件一组\n        const sliceGroup = [];\n        const total = Math.ceil(files.length / 500);\n        for (let i = 0; i < total; i++) {\n            sliceGroup.push(files.splice(0, 500));\n        }\n        const tasks = sliceGroup.map(group => deleteMultipleObject({\n            Bucket: bucket,\n            Region: region,\n            Objects: group.map(file => ({ Key: file.Key }))\n        }));\n        // 删除多个文件\n        const taskRes = await Promise.all(tasks);\n        // 合并响应结果\n        const Deleted = taskRes.map(_ => _.Deleted).reduce((prev, next) => [...prev, ...next], []);\n        const Error = taskRes.map(_ => _.Error).reduce((prev, next) => [...prev, ...next], []);\n        return {\n            Deleted,\n            Error\n        };\n    }\n    /**\n     * 获取文件存储权限\n     * READONLY：所有用户可读，仅创建者和管理员可写\n     * PRIVATE：仅创建者及管理员可读写\n     * ADMINWRITE：所有用户可读，仅管理员可写\n     * ADMINONLY：仅管理员可读写\n     * @returns\n     */\n    async getStorageAcl() {\n        const { bucket, env } = this.getStorageConfig();\n        const res = await this.tcbService.request('DescribeStorageACL', {\n            EnvId: env,\n            Bucket: bucket\n        });\n        return res.AclTag;\n    }\n    /**\n     * 设置文件存储权限\n     * READONLY：所有用户可读，仅创建者和管理员可写\n     * PRIVATE：仅创建者及管理员可读写\n     * ADMINWRITE：所有用户可读，仅管理员可写\n     * ADMINONLY：仅管理员可读写\n     * @param {string} acl\n     * @returns\n     */\n    async setStorageAcl(acl) {\n        const validAcl = ['READONLY', 'PRIVATE', 'ADMINWRITE', 'ADMINONLY'];\n        if (!validAcl.includes(acl)) {\n            throw new error_1.CloudBaseError('非法的权限类型');\n        }\n        const { bucket, env } = this.getStorageConfig();\n        return this.tcbService.request('ModifyStorageACL', {\n            EnvId: env,\n            Bucket: bucket,\n            AclTag: acl\n        });\n    }\n    /**\n     * 遍历云端文件夹\n     * @param {string} prefix\n     * @param {string} [marker] 路径开始标志\n     * @returns {Promise<IListFileInfo[]>}\n     */\n    async walkCloudDir(prefix, marker) {\n        const { bucket, region } = this.getStorageConfig();\n        return this.walkCloudDirCustom({\n            prefix,\n            bucket,\n            region,\n            marker\n        });\n    }\n    /**\n     * 遍历云端文件夹，支持自定义 Bucket 和 Region\n     * @param {string} prefix\n     * @param {string} [marker]\n     * @param {string} bucket\n     * @param {string} region\n     * @returns {Promise<IListFileInfo[]>}\n     */\n    async walkCloudDirCustom(options) {\n        const { prefix, bucket, region, marker = '/' } = options;\n        let fileList = [];\n        const cos = this.getCos();\n        const getBucket = util_1.default.promisify(cos.getBucket).bind(cos);\n        const prefixKey = this.getCloudKey(prefix);\n        const res = await getBucket({\n            Bucket: bucket,\n            Region: region,\n            Prefix: prefixKey,\n            MaxKeys: 100,\n            Marker: marker\n        });\n        fileList.push(...res.Contents);\n        let moreFiles = [];\n        if (res.IsTruncated === 'true' || res.IsTruncated === true) {\n            moreFiles = await this.walkCloudDirCustom({\n                bucket,\n                region,\n                prefix: prefixKey,\n                marker: res.NextMarker\n            });\n        }\n        fileList.push(...moreFiles);\n        return fileList;\n    }\n    /**\n     * 遍历本地文件夹\n     * 忽略不包含 dir 路径，即如果 ignore 匹配 dir，dir 也不会被忽略\n     * @private\n     * @param {string} dir\n     * @param {(string | string[])} [ignore]\n     * @returns\n     */\n    async walkLocalDir(dir, ignore) {\n        try {\n            return walkdir_1.default.async(dir, {\n                filter: (currDir, files) => {\n                    // NOTE: ignore 为空数组时会忽略全部文件\n                    if (!ignore || !ignore.length)\n                        return files;\n                    return files.filter(item => {\n                        // 当前文件全路径\n                        const fullPath = path_1.default.join(currDir, item);\n                        // 文件相对于传入目录的路径\n                        const fileRelativePath = fullPath.replace(path_1.default.join(dir, path_1.default.sep), '');\n                        // 匹配\n                        return !micromatch_1.default.isMatch(fileRelativePath, ignore);\n                    });\n                }\n            });\n        }\n        catch (e) {\n            throw new error_1.CloudBaseError(e.message);\n        }\n    }\n    /**\n     * 获取文件上传链接属性\n     */\n    async getUploadMetadata(path) {\n        const config = this.environment.getAuthConfig();\n        const res = await utils_1.cloudBaseRequest({\n            config,\n            params: {\n                path,\n                action: 'storage.getUploadMetadata'\n            },\n            method: 'POST'\n        });\n        if (res.code) {\n            throw new error_1.CloudBaseError(`${res.code}: ${res.message || ''}`, {\n                requestId: res.requestId\n            });\n        }\n        return res.data;\n    }\n    /**\n     * 获取静态网站配置\n     */\n    async getWebsiteConfig(options) {\n        const { bucket, region } = options;\n        const cos = this.getCos();\n        const getBucketWebsite = util_1.default.promisify(cos.getBucketWebsite).bind(cos);\n        const res = await getBucketWebsite({\n            Bucket: bucket,\n            Region: region\n        });\n        return res;\n    }\n    /**\n     * 配置文档\n     */\n    async putBucketWebsite(options) {\n        const { indexDocument, errorDocument, bucket, region, routingRules } = options;\n        const cos = this.getCos();\n        const putBucketWebsite = util_1.default.promisify(cos.putBucketWebsite).bind(cos);\n        let params = {\n            Bucket: bucket,\n            Region: region,\n            WebsiteConfiguration: {\n                IndexDocument: {\n                    Suffix: indexDocument\n                },\n                ErrorDocument: {\n                    Key: errorDocument\n                }\n            }\n        };\n        if (routingRules) {\n            params.WebsiteConfiguration.RoutingRules = [];\n            for (let value of routingRules) {\n                const routeItem = {};\n                if (value.keyPrefixEquals) {\n                    routeItem.Condition = {\n                        KeyPrefixEquals: value.keyPrefixEquals\n                    };\n                }\n                if (value.httpErrorCodeReturnedEquals) {\n                    routeItem.Condition = {\n                        HttpErrorCodeReturnedEquals: value.httpErrorCodeReturnedEquals\n                    };\n                }\n                if (value.replaceKeyWith) {\n                    routeItem.Redirect = {\n                        ReplaceKeyWith: value.replaceKeyWith\n                    };\n                }\n                if (value.replaceKeyPrefixWith) {\n                    routeItem.Redirect = {\n                        ReplaceKeyPrefixWith: value.replaceKeyPrefixWith\n                    };\n                }\n                params.WebsiteConfiguration.RoutingRules.push(routeItem);\n            }\n        }\n        const res = await putBucketWebsite(params);\n        return res;\n    }\n    /**\n     * 查询object列表\n     * @param {IGetBucketOpions} options\n     * @memberof StorageService\n     */\n    async getBucket(options) {\n        // const { bucket } = this.getStorageConfig()\n        const { prefix, maxKeys, marker, bucket, region } = options;\n        const cos = this.getCos();\n        const getBucket = util_1.default.promisify(cos.getBucket).bind(cos);\n        const prefixKey = this.getCloudKey(prefix);\n        const res = await getBucket({\n            Bucket: bucket,\n            Region: region,\n            Prefix: prefixKey,\n            MaxKeys: maxKeys,\n            Marker: marker\n        });\n        return res;\n    }\n    /**\n     * 获取 COS 配置\n     */\n    getCos(parallel = 20) {\n        const { secretId, secretKey, token, proxy } = this.environment.getAuthConfig();\n        const cosProxy = process.env.TCB_COS_PROXY;\n        return new cos_nodejs_sdk_v5_1.default({\n            FileParallelLimit: parallel,\n            SecretId: secretId,\n            SecretKey: secretKey,\n            Proxy: cosProxy || proxy,\n            SecurityToken: token\n        });\n    }\n    /**\n     * 将 cloudPath 转换成 cloudPath/ 形式\n     */\n    getCloudKey(cloudPath) {\n        if (!cloudPath) {\n            return '';\n        }\n        // 单个 / 转换成根目录\n        if (cloudPath === '/') {\n            return '';\n        }\n        return cloudPath[cloudPath.length - 1] === '/' ? cloudPath : `${cloudPath}/`;\n    }\n    /**\n     * 将 cloudPath 转换成 fileId\n     */\n    cloudPathToFileId(cloudPath) {\n        const { env, bucket } = this.getStorageConfig();\n        return `cloud://${env}.${bucket}/${cloudPath}`;\n    }\n    /**\n     * 获取存储桶配置\n     */\n    getStorageConfig() {\n        var _a;\n        const envConfig = this.environment.lazyEnvironmentConfig;\n        const storageConfig = (_a = envConfig === null || envConfig === void 0 ? void 0 : envConfig.Storages) === null || _a === void 0 ? void 0 : _a[0];\n        const { Region, Bucket } = storageConfig;\n        const region = process.env.TCB_COS_REGION || Region;\n        return {\n            region,\n            bucket: Bucket,\n            env: envConfig.EnvId\n        };\n    }\n    /**\n     * 带重试功能的上传多文件函数\n     * @param uploadFiles sdk上传函数\n     * @param options sdk上传函数参数\n     * @param times 重试次数\n     * @param interval 重试时间间隔(毫秒)\n     * @param failedFiles 失败文件列表\n     * @returns\n     */\n    async uploadFilesWithRetry({ uploadFiles, options, times, interval, failedFiles }) {\n        const { files, onFileFinish } = options;\n        const tempFailedFiles = [];\n        let curError = null;\n        const res = await uploadFiles(Object.assign(Object.assign({}, options), { files: failedFiles.length\n                ? files.filter(file => failedFiles.includes(file.Key))\n                : files, onFileFinish: (...args) => {\n                const error = args[0];\n                const fileInfo = args[2];\n                if (error) {\n                    curError = error;\n                    tempFailedFiles.push(fileInfo.Key);\n                }\n                onFileFinish === null || onFileFinish === void 0 ? void 0 : onFileFinish.apply(null, args);\n            } }));\n        // if (!tempFailedFiles?.length || times <= 0) return res\n        if (!(tempFailedFiles === null || tempFailedFiles === void 0 ? void 0 : tempFailedFiles.length)) {\n            return res;\n        }\n        else {\n            if (times > 0) {\n                return await new Promise((resolve, reject) => {\n                    setTimeout(() => this.uploadFilesWithRetry({\n                        uploadFiles,\n                        options,\n                        times: times - 1,\n                        interval,\n                        failedFiles: tempFailedFiles\n                    }).then(res => resolve(res))\n                        .catch(err => reject(err)), interval);\n                });\n            }\n            else {\n                if (curError) {\n                    throw curError;\n                }\n            }\n        }\n    }\n    /**\n     * 拼接路径下载单文件\n     * @param file\n     * @param cloudDirectoryKey\n     * @param resolveLocalPath\n     * @returns\n     */\n    async downloadWithFilePath({ file, cloudDirectoryKey, resolveLocalPath }) {\n        const fileRelativePath = file.Key.replace(cloudDirectoryKey, '');\n        // 空路径和文件夹跳过\n        if (!fileRelativePath || /\\/$/g.test(fileRelativePath)) {\n            return;\n        }\n        const localFilePath = path_1.default.join(resolveLocalPath, fileRelativePath);\n        // 创建文件的父文件夹\n        const fileDir = path_1.default.dirname(localFilePath);\n        await make_dir_1.default(fileDir);\n        return this.downloadFile({\n            cloudPath: file.Key,\n            localPath: localFilePath\n        });\n    }\n    /**\n     * 根据下载结果返回错误列表\n     * @param res\n     * @returns\n     */\n    determineDownLoadResultIsError(res) {\n        const resultErrorArr = [];\n        res.map(item => /Error/gi.test(Object.prototype.toString.call(item)) && resultErrorArr.push(item));\n        return resultErrorArr;\n    }\n}\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"uploadFile\", null);\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"uploadFiles\", null);\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"uploadFileCustom\", null);\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"uploadDirectory\", null);\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"uploadDirectoryCustom\", null);\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"uploadFilesCustom\", null);\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"createCloudDirectroy\", null);\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"createCloudDirectroyCustom\", null);\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"downloadFile\", null);\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"downloadDirectory\", null);\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"listDirectoryFiles\", null);\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"getTemporaryUrl\", null);\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"deleteFile\", null);\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"deleteFileCustom\", null);\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"getFileInfo\", null);\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"deleteDirectory\", null);\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"deleteDirectoryCustom\", null);\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"getStorageAcl\", null);\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"setStorageAcl\", null);\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"walkCloudDir\", null);\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"walkCloudDirCustom\", null);\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"putBucketWebsite\", null);\n__decorate([\n    utils_1.preLazy()\n], StorageService.prototype, \"getBucket\", null);\nexports.StorageService = StorageService;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AsyncTaskParallelController = void 0;\n/**\n * 异步任务并发控制器，以一定的并发数执行所有任务\n * 不具备队列性质，异步任务随机执行\n * 单个任务异常，错误会返回，单不会退出执行\n * 所有任务执行\n */\nclass AsyncTaskParallelController {\n    constructor(maxParallel, checkInterval = 20) {\n        this.tasks = [];\n        this.maxParallel = Number(maxParallel) || 20;\n        this.checkInterval = checkInterval;\n    }\n    loadTasks(tasks) {\n        this.tasks.push(...tasks);\n        this.totalTasks = this.tasks.length;\n    }\n    push(task) {\n        this.tasks.push(task);\n        this.totalTasks = this.tasks.length;\n    }\n    // 开始执行任务\n    async run() {\n        // 存储任务执行结果\n        const results = [];\n        // 记录已经运行的任务\n        const taskHasRun = [];\n        // 记录任务是否执行完成\n        const taskDone = [];\n        // 当前正在运行的任务数量\n        let runningTask = 0;\n        return new Promise(resolve => {\n            // 使用定时器，不阻塞线程\n            const timer = setInterval(() => {\n                // 全部任务运行完成\n                const taskDoneLength = taskDone.filter(item => item).length;\n                if (runningTask === 0 && taskDoneLength === this.totalTasks) {\n                    clearInterval(timer);\n                    resolve(results);\n                }\n                // 当前运行任务数超过最大并发，不再执行新的任务\n                if (runningTask >= this.maxParallel) {\n                    return;\n                }\n                // 遍历任务列表，开始执行还没有执行的任务\n                this.tasks.forEach((task, index) => {\n                    if (!taskHasRun[index] && runningTask < this.maxParallel) {\n                        runningTask++;\n                        taskHasRun[index] = 1;\n                        task()\n                            .then(res => {\n                            results[index] = res;\n                        })\n                            .catch(err => {\n                            results[index] = err;\n                        })\n                            .then(() => {\n                            runningTask--;\n                            taskDone[index] = 1;\n                        });\n                    }\n                });\n            }, this.checkInterval);\n        });\n    }\n}\nexports.AsyncTaskParallelController = AsyncTaskParallelController;\n","\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EnvService = void 0;\nconst cos_nodejs_sdk_v5_1 = __importDefault(require(\"cos-nodejs-sdk-v5\"));\nconst util_1 = __importDefault(require(\"util\"));\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst cam_1 = require(\"../cam\");\nconst constant_1 = require(\"../constant\");\nconst billing_1 = require(\"../billing\");\nclass EnvService {\n    constructor(environment) {\n        this.environment = environment;\n        this.envId = environment.getEnvId();\n        this.envType = environment.getEnvType();\n        this.cloudService = new utils_1.CloudService(environment.cloudBaseContext, 'tcb', '2018-06-08');\n        this.camService = new cam_1.CamService(environment.cloudBaseContext);\n        this.billService = new billing_1.BillingService(environment.cloudBaseContext);\n    }\n    /**\n     * 列出所有环境\n     * @returns {Promise<IListEnvRes>}\n     */\n    async listEnvs() {\n        return this.cloudService.request('DescribeEnvs');\n    }\n    /**\n     * 创建新环境\n     * @param {string} name 环境名称\n     * @returns {Promise<ICreateEnvRes>}\n     */\n    async createEnv(param) {\n        // 1. 检查是否开通过TCB服务,若未开通，跳2检查角色  开通则跳5 创建环境\n        // 2. 查询tcb 角色是否绑定该账户\n        // 3. 若未绑定，则创建角色并绑定角色\n        // 4. 开通TCB服务\n        // 5. 创建环境\n        // 6. 购买环境，选择预付费 或 后付费 套餐\n        // 7. 若购买失败，将当前环境销毁，若购买成功，返回envId\n        const { name, paymentMode, channel = 'qc_console' } = param;\n        // 1. 检查TCB服务是否开通\n        const { Initialized } = await this.checkTcbService();\n        if (!Initialized) {\n            // 跳2 查询TCB角色是否绑定\n            let hasTcbRole = false;\n            try {\n                const res = await this.camService.getRole(constant_1.ROLE_NAME.TCB);\n                hasTcbRole = true;\n            }\n            catch (e) {\n                // 判断是否为角色不存在错误\n                if (e.code !== 'InvalidParameter.RoleNotExist') {\n                    throw e;\n                }\n            }\n            if (!hasTcbRole) {\n                // 3. 当前账户没有tcbRole，创建角色并绑定\n                // 创建角色\n                const createRoleResult = await this.camService.createRole({\n                    RoleName: constant_1.ROLE_NAME.TCB,\n                    Description: '云开发(TCB)操作权限含在访问管理(CAM)创建角色，新增角色载体，给角色绑定策略；含读写对象存储(COS)数据；含读写无服务器云函数(SCF)数据；含读取云监控(Monitor)数据。',\n                    PolicyDocument: '{\"version\":\"2.0\",\"statement\":[{\"action\":\"sts:AssumeRole\",\"effect\":\"allow\",\"principal\":{\"service\":[\"scf.qcloud.com\",\"tcb.cloud.tencent.com\", \"cvm.qcloud.com\"]}}]}'\n                });\n                const { RoleId } = createRoleResult;\n                // 绑定角色策略\n                // await this.camService.attachRolePolicy({\n                //     PolicyId: 8825032,\n                //     AttachRoleName: ROLE_NAME.TCB\n                // })\n                await this.camService.attachRolePolicies({\n                    RoleName: constant_1.ROLE_NAME.TCB,\n                    PolicyName: [\n                        'QcloudAccessForTCBRole',\n                        'QcloudAccessForTCBRoleInAccessCloudBaseRun'\n                    ]\n                });\n            }\n            // 4. 未开通则初始化TCB\n            await this.initTcb({ Channel: channel, Source: 'qcloud' });\n        }\n        // 5. 创建环境\n        const params = {\n            Alias: name,\n            EnvId: `${name}-${utils_1.guid6()}`,\n            Source: 'qcloud'\n        };\n        if (channel) {\n            params.Channel = channel;\n        }\n        const { EnvId } = await this.cloudService.request('CreateEnv', params);\n        const realPaymentMode = paymentMode ? paymentMode : 'postpay';\n        // 6. 购买环境\n        let prepayCreateDeal = false;\n        let prepayPayDeal = false;\n        let postpayDeal = false;\n        let payError = null;\n        if (realPaymentMode === 'prepay') {\n            // 预付费\n            // 1. 创建订单\n            // 2. 支付订单\n            const goods = [\n                {\n                    GoodsCategoryId: 101183,\n                    // action: 'purchase',\n                    // currency: 'CNY',\n                    RegionId: 1,\n                    ZoneId: 0,\n                    GoodsNum: 1,\n                    ProjectId: 0,\n                    PayMode: 1,\n                    Platform: 1,\n                    GoodsDetail: JSON.stringify({\n                        productCode: 'p_tcb',\n                        subProductCode: 'sp_tcb_basic',\n                        resourceId: EnvId,\n                        pid: 16677,\n                        timeUnit: 'm',\n                        timeSpan: 1,\n                        tcb_cos: 1,\n                        tcb_cdn: 1,\n                        tcb_scf: 1,\n                        tcb_mongodb: 1,\n                        region: 'ap-shanghai',\n                        zone: 'ap-shanghai-1',\n                        source: 'qcloud',\n                        envId: EnvId,\n                        packageId: 'basic',\n                        isAutoRenew: 'true',\n                        tranType: 1,\n                        productInfo: [\n                            {\n                                name: '套餐版本',\n                                value: '基础版 1'\n                            },\n                            {\n                                name: '存储空间',\n                                value: '5GB'\n                            },\n                            {\n                                name: 'CDN流量',\n                                value: '5GB'\n                            },\n                            {\n                                name: '云函数资源使用量',\n                                value: '4万GBs'\n                            },\n                            {\n                                name: '数据库容量',\n                                value: '2GB'\n                            },\n                            {\n                                name: '数据库同时连接数',\n                                value: '20个'\n                            }\n                        ]\n                    })\n                }\n            ];\n            let OrderIdsList = [];\n            try {\n                const { OrderIds } = await this.billService.GenerateDeals(goods);\n                OrderIdsList = OrderIds;\n                prepayCreateDeal = true;\n            }\n            catch (e) {\n                // 预付费下单失败\n                payError = e;\n            }\n            if (prepayCreateDeal) {\n                // 下单成功\n                try {\n                    // 购买环境套餐\n                    const { OrderIds: succOrderIds } = await this.billService.PayDeals(OrderIdsList);\n                    // 判断订单是否支付成功\n                    if (succOrderIds[0] === OrderIdsList[0]) {\n                        prepayPayDeal = true;\n                    }\n                    else {\n                        throw new error_1.CloudBaseError('支付成功的订单号不一致');\n                    }\n                }\n                catch (e) {\n                    // 预付费订单支付失败\n                    payError = new error_1.CloudBaseError('预付费订单支付失败，请进入订单管理页面(https://console.cloud.tencent.com/deal)重新支付', {\n                        original: e\n                    });\n                }\n            }\n        }\n        if (realPaymentMode === 'postpay') {\n            // 后付费\n            try {\n                const { TranId } = await this.CreatePostpayPackage(EnvId);\n                postpayDeal = true;\n            }\n            catch (e) {\n                payError = e;\n            }\n        }\n        // 检查支付状态\n        // 1. 预付费下单失败 删除环境\n        // 2. 预付费下单成功过，支付订单失败，提示用户\n        // 3. 后付费开通失败 删除环境\n        if (realPaymentMode === 'prepay') {\n            if (!prepayCreateDeal) {\n                // 情形1\n                await this.destroyEnv(EnvId);\n                throw payError;\n            }\n            else {\n                if (!prepayPayDeal) {\n                    // 情形2\n                    throw payError;\n                }\n            }\n        }\n        if (realPaymentMode === 'postpay') {\n            if (!postpayDeal) {\n                // 情形3\n                await this.destroyEnv(EnvId);\n                throw payError;\n            }\n        }\n        // 成功返回envId\n        return {\n            envId: EnvId\n        };\n    }\n    /**\n     * 拉取安全域名列表\n     * @returns {Promise<IAuthDomainsRes>}\n     */\n    async getEnvAuthDomains() {\n        return this.cloudService.request('DescribeAuthDomains', {\n            EnvId: this.envId\n        });\n    }\n    /**\n     * 添加环境安全域名\n     * @param {string[]} domains 域名字符串数组\n     * @returns {Promise<IResponseInfo>}\n     */\n    async createEnvDomain(domains) {\n        const res = await this.cloudService.request('CreateAuthDomain', {\n            EnvId: this.envId,\n            Domains: domains\n        });\n        // 添加 COS CORS 域名\n        const promises = domains.map(async (domain) => {\n            this.modifyCosCorsDomain(domain);\n        });\n        await Promise.all(promises);\n        return res;\n    }\n    /**\n     * 删除环境安全域名\n     * @param {string[]} domainIds 域名字符串数组\n     * @returns {Promise<IDeleteDomainRes>}\n     */\n    async deleteEnvDomain(domains) {\n        // 根据域名获取域名 Id\n        const { Domains } = await this.getEnvAuthDomains();\n        const domainIds = Domains.filter(item => domains.includes(item.Domain)).map(item => item.Id);\n        const res = await this.cloudService.request('DeleteAuthDomain', {\n            EnvId: this.envId,\n            DomainIds: domainIds\n        });\n        // 删除 COS CORS 域名\n        const promises = domains.map(async (domain) => {\n            this.modifyCosCorsDomain(domain, true);\n        });\n        await Promise.all(promises);\n        return res;\n    }\n    /**\n     * 检查tcb服务是否开通\n     * @returns {Promise<ICheckTcbServiceRes>}\n     * @memberof CamService\n     */\n    async checkTcbService() {\n        return this.cloudService.request('CheckTcbService', {});\n    }\n    /**\n     * 初始化TCB\n     * @returns {Promise<IResponseInfo>}\n     * @memberof EnvService\n     */\n    async initTcb(param) {\n        let initParam = {};\n        if (param) {\n            initParam = Object.assign({}, param);\n        }\n        return this.cloudService.request('InitTcb', initParam);\n    }\n    /**\n     * 开通后付费套餐\n     * @param {string} envId\n     * @param {SOURCE} [source]\n     * @returns {Promise<ICreatePostpayRes>}\n     * @memberof EnvService\n     */\n    async CreatePostpayPackage(envId, source) {\n        const realSource = source ? source : 'qcloud';\n        return this.cloudService.request('CreatePostpayPackage', {\n            EnvId: envId,\n            Source: realSource\n        });\n    }\n    /**\n     * 销毁环境\n     * @param {string} envId\n     * @returns {Promise<IResponseInfo>}\n     * @memberof EnvService\n     */\n    async destroyEnv(envId) {\n        return this.cloudService.request('DestroyEnv', {\n            EnvId: envId\n        });\n    }\n    /**\n     * 获取环境信息\n     * @returns {Promise<IEnvInfoRes>}\n     */\n    async getEnvInfo() {\n        // NOTE: DescribeEnv 接口废弃，需要使用 DescribeEnvs 接口\n        const params = {\n            EnvId: this.envId\n        };\n        if (this.envType === 'run') {\n            params.EnvType = 'run';\n        }\n        const { EnvList, RequestId } = await this.cloudService.request('DescribeEnvs', params);\n        return {\n            EnvInfo: (EnvList === null || EnvList === void 0 ? void 0 : EnvList.length) ? EnvList[0] : {},\n            RequestId\n        };\n    }\n    /**\n     * 修改环境名称\n     * @param {string} alias 环境名称\n     * @returns {Promise<IResponseInfo>}\n     */\n    async updateEnvInfo(alias) {\n        return this.cloudService.request('ModifyEnv', {\n            EnvId: this.envId,\n            Alias: alias\n        });\n    }\n    /**\n     * 拉取登录配置列表\n     * @returns {Promise<IEnvLoginConfigRes>}\n     */\n    async getLoginConfigList() {\n        return this.cloudService.request('DescribeLoginConfigs', {\n            EnvId: this.envId\n        });\n    }\n    /**\n     * 创建登录方式\n     * 'WECHAT-OPEN'：微信开放平台\n     * 'WECHAT-PUBLIC'：微信公众平台\n     * @param {('WECHAT-OPEN' | 'WECHAT-PUBLIC')} platform 'WECHAT-OPEN' | 'WECHAT-PUBLIC'\n     * @param {string} appId 微信 appId\n     * @param {string} appSecret 微信 appSecret\n     * @returns {Promise<IResponseInfo>}\n     */\n    async createLoginConfig(platform, appId, appSecret) {\n        let finalAppSecret = appSecret;\n        if (platform === 'ANONYMOUS') {\n            finalAppSecret = 'anonymous';\n        }\n        return this.cloudService.request('CreateLoginConfig', {\n            EnvId: this.envId,\n            // 平台， “QQ\" \"WECHAT-OPEN\" \"WECHAT-PUBLIC\"\n            Platform: platform,\n            PlatformId: appId,\n            PlatformSecret: finalAppSecret ? utils_1.rsaEncrypt(finalAppSecret) : undefined,\n            Status: 'ENABLE'\n        });\n    }\n    /**\n     * 更新登录方式配置\n     * @param {string} configId 配置 Id，从配置列表中获取\n     * @param {string} [status='ENABLE'] 是否启用 'ENABLE', 'DISABLE' ，可选\n     * @param {string} [appId=''] 微信 appId，可选\n     * @param {string} [appSecret=''] 微信 appSecret，可选\n     * @returns {Promise<IResponseInfo>}\n     */\n    /* eslint-disable-next-line */\n    async updateLoginConfig(configId, status = 'ENABLE', appId = '', appSecret = '') {\n        const validStatus = ['ENABLE', 'DISABLE'];\n        let finalAppSecret = appSecret;\n        if (!validStatus.includes(status)) {\n            throw new error_1.CloudBaseError(`Invalid status value: ${status}. Only support 'ENABLE', 'DISABLE'`);\n        }\n        const params = {\n            EnvId: this.envId,\n            ConfigId: configId,\n            Status: status\n        };\n        if (appId === 'anonymous') {\n            finalAppSecret = 'anonymous';\n        }\n        appId && (params.PlatformId = appId);\n        finalAppSecret && (params.PlatformSecret = utils_1.rsaEncrypt(finalAppSecret));\n        return this.cloudService.request('UpdateLoginConfig', params);\n    }\n    // 创建自定义登录私钥\n    async createCustomLoginKeys() {\n        return this.cloudService.request('CreateCustomLoginKeys', {\n            EnvId: this.envId\n        });\n    }\n    // 获取 COS CORS 域名\n    async getCOSDomains() {\n        const cos = this.getCos();\n        const getBucketCors = util_1.default.promisify(cos.getBucketCors).bind(cos);\n        const { bucket, region } = this.getStorageConfig();\n        const res = await getBucketCors({\n            Bucket: bucket,\n            Region: region\n        });\n        return res.CORSRules;\n    }\n    // 添加 COS CORS 域名，和 Web 端行为保持一致\n    async modifyCosCorsDomain(domain, deleted = false) {\n        const cos = this.getCos();\n        const putBucketCors = util_1.default.promisify(cos.putBucketCors).bind(cos);\n        const { bucket, region } = this.getStorageConfig();\n        // 去掉原有此域名CORS配置\n        let corsRules = await this.getCOSDomains();\n        corsRules = corsRules.filter(item => {\n            return !(item.AllowedOrigins &&\n                item.AllowedOrigins.length === 2 &&\n                item.AllowedOrigins[0] === `http://${domain}` &&\n                item.AllowedOrigins[1] === `https://${domain}`);\n        });\n        if (!deleted) {\n            corsRules.push({\n                AllowedOrigin: [`http://${domain}`, `https://${domain}`],\n                AllowedMethod: ['GET', 'POST', 'PUT', 'DELETE', 'HEAD'],\n                AllowedHeader: ['*'],\n                ExposeHeader: ['Etag', 'Date'],\n                MaxAgeSeconds: '5'\n            });\n        }\n        await putBucketCors({\n            Bucket: bucket,\n            Region: region,\n            CORSRules: corsRules\n        });\n    }\n    getCos() {\n        const { secretId, secretKey, token } = this.environment.getAuthConfig();\n        return new cos_nodejs_sdk_v5_1.default({\n            SecretId: secretId,\n            SecretKey: secretKey,\n            SecurityToken: token\n        });\n    }\n    getStorageConfig() {\n        var _a;\n        const envConfig = this.environment.lazyEnvironmentConfig;\n        const storageConfig = (_a = envConfig === null || envConfig === void 0 ? void 0 : envConfig.Storages) === null || _a === void 0 ? void 0 : _a[0];\n        const { Region, Bucket } = storageConfig;\n        return {\n            env: envConfig.EnvId,\n            region: Region,\n            bucket: Bucket\n        };\n    }\n}\n__decorate([\n    utils_1.preLazy()\n], EnvService.prototype, \"createEnvDomain\", null);\n__decorate([\n    utils_1.preLazy()\n], EnvService.prototype, \"deleteEnvDomain\", null);\nexports.EnvService = EnvService;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CamService = void 0;\nconst utils_1 = require(\"../utils\");\nclass CamService {\n    constructor(context) {\n        this.camService = new utils_1.CloudService(context, CamService.camServiceVersion.service, CamService.camServiceVersion.version);\n    }\n    /**\n     * 查询账户角色列表\n     * @param {number} page\n     * @param {number} rp\n     * @returns {Promise<IRoleListRes>}\n     * @memberof CamService\n     */\n    async describeRoleList(page, rp) {\n        return this.camService.request('DescribeRoleList', {\n            Page: page,\n            Rp: rp\n        });\n    }\n    /**\n     * 获取角色详情\n     * @param {string} roleName\n     * @returns {Promise<IGetRoleRes>}\n     * @memberof CamService\n     */\n    async getRole(roleName) {\n        return this.camService.request('GetRole', {\n            RoleName: roleName\n        });\n    }\n    /**\n     * 创建角色\n     * @param {{\n     *         RoleName: string\n     *         PolicyDocument: string\n     *         Description: string\n     *     }} param\n     * @returns {Promise<ICreateRoleRes>}\n     * @memberof CamService\n     */\n    async createRole(param) {\n        return this.camService.request('CreateRole', param);\n    }\n    /**\n     * 绑定角色策略\n     * @param {{\n     *         PolicyId: number\n     *         AttachRoleName: string\n     *     }} param\n     * @returns {Promise<IResponseInfo>}\n     * @memberof CamService\n     */\n    async attachRolePolicy(param) {\n        return this.camService.request('AttachRolePolicy', param);\n    }\n    async attachRolePolicies(param) {\n        return this.camService.request('AttachRolePolicies', param);\n    }\n    /**\n     * 删除角色\n     * @param {string} roleName\n     * @returns {Promise<IResponseInfo>}\n     * @memberof CamService\n     */\n    async deleteRole(roleName) {\n        return this.camService.request('DeleteRole', {\n            RoleName: roleName\n        });\n    }\n}\nexports.CamService = CamService;\nCamService.camServiceVersion = {\n    service: 'cam',\n    version: '2019-01-16'\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BillingService = void 0;\nconst utils_1 = require(\"../utils\");\nclass BillingService {\n    constructor(context) {\n        this.billService = new utils_1.CloudService(context, BillingService.billServiceVersion.service, BillingService.billServiceVersion.version);\n    }\n    /**\n     * 创建订单\n     * @param {Array<IGoodItem>} goods\n     * @returns {Promise<IGenerateDealsRes>}\n     * @memberof BillingService\n     */\n    async GenerateDeals(goods) {\n        return this.billService.request('GenerateDeals', {\n            Goods: goods\n        });\n    }\n    /**\n     * 支付订单\n     * @param {Array<string>} orderIds\n     * @returns {Promise<IPayDealsRes>}\n     * @memberof BillingService\n     */\n    async PayDeals(orderIds) {\n        return this.billService.request('PayDeals', {\n            OrderIds: orderIds\n        });\n    }\n}\nexports.BillingService = BillingService;\nBillingService.billServiceVersion = {\n    service: 'billing',\n    version: '2018-07-09'\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CommonService = void 0;\nconst utils_1 = require(\"../utils\");\nconst error_1 = require(\"../error\");\n/**\n * 公共的云api调用方法 透传用户参数 无业务逻辑处理\n * @export\n * @class CommonService\n */\nconst ActionVersionMap = {\n    tcb: '2018-06-08',\n    flexdb: '2018-11-27',\n    scf: '2018-04-16',\n    sts: '2018-04-16',\n    cam: '2018-04-16',\n    lowcode: '2021-01-08'\n};\nclass CommonService {\n    constructor(environment, serviceType, serviceVersion) {\n        this.environment = environment;\n        this.commonService = new utils_1.CloudService(environment.cloudBaseContext, serviceType, serviceVersion || ActionVersionMap[serviceType]);\n    }\n    /**\n     * 公共方法调用\n     * @param {ICommonApiServiceParam} param\n     * @returns {Promise<any>}\n     * @memberof CommonService\n     */\n    async call(options) {\n        const { Action, Param = {} } = options;\n        if (!Action) {\n            throw new error_1.CloudBaseError('缺少必填参数 Action');\n        }\n        const res = await this.commonService.request(Action, Object.assign({}, Param));\n        return res;\n    }\n}\nexports.CommonService = CommonService;\n","\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HostingService = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst make_dir_1 = __importDefault(require(\"make-dir\"));\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst parallel_1 = require(\"../utils/parallel\");\nconst envDomainCache = new Map();\nconst HostingStatusMap = {\n    init: '初始化中',\n    process: '处理中',\n    online: '上线',\n    destroying: '销毁中',\n    offline: '下线',\n    create_fail: '初始化失败',\n    destroy_fail: '销毁失败' // eslint-disable-line\n};\nclass HostingService {\n    constructor(environment) {\n        this.environment = environment;\n        this.tcbService = new utils_1.CloudService(environment.cloudBaseContext, 'tcb', '2018-06-08');\n        this.cdnService = new utils_1.CloudService(environment.cloudBaseContext, 'cdn', '2018-06-06');\n    }\n    /**\n     * 获取 hosting 信息\n     */\n    async getInfo() {\n        const { envId } = this.getHostingConfig();\n        const { Data } = await this.tcbService.request('DescribeStaticStore', {\n            EnvId: envId\n        });\n        return Data;\n    }\n    /**\n     * 开启 hosting 服务，异步任务\n     */\n    async enableService() {\n        const { envId } = this.getHostingConfig();\n        const hostings = await this.getInfo();\n        // hosting 服务已开启\n        if (hostings === null || hostings === void 0 ? void 0 : hostings.length) {\n            const website = hostings[0];\n            // offline 状态的服务可重新开启\n            if (website.Status !== 'offline') {\n                throw new error_1.CloudBaseError('静态网站服务已开启，请勿重复操作！');\n            }\n        }\n        const res = await this.tcbService.request('CreateStaticStore', {\n            EnvId: envId\n        });\n        const code = res.Result === 'succ' ? 0 : -1;\n        return {\n            code,\n            requestId: res.RequestId\n        };\n    }\n    async findFiles(options) {\n        const hosting = await this.checkStatus();\n        const { Bucket, Regoin } = hosting;\n        const { maxKeys, marker, prefix } = options;\n        const storageService = await this.environment.getStorageService();\n        const res = await storageService.getBucket({\n            bucket: Bucket,\n            region: Regoin,\n            maxKeys,\n            marker,\n            prefix\n        });\n        return res;\n    }\n    /**\n     * 展示文件列表\n     */\n    async listFiles() {\n        const hosting = await this.checkStatus();\n        const { Bucket, Regoin } = hosting;\n        const storageService = await this.environment.getStorageService();\n        const list = await storageService.walkCloudDirCustom({\n            prefix: '',\n            bucket: Bucket,\n            region: Regoin\n        });\n        return list;\n    }\n    /**\n     * 销毁静态托管服务\n     */\n    async destroyService() {\n        const { envId } = this.getHostingConfig();\n        const files = await this.listFiles();\n        if (files === null || files === void 0 ? void 0 : files.length) {\n            throw new error_1.CloudBaseError('静态网站文件不为空，无法销毁！', {\n                code: 'INVALID_OPERATION'\n            });\n        }\n        const hostings = await this.getInfo();\n        if (!hostings || !hostings.length) {\n            throw new error_1.CloudBaseError('静态网站服务未开启！', {\n                code: 'INVALID_OPERATION'\n            });\n        }\n        const website = hostings[0];\n        // destroy_fail 状态可重试\n        if (website.Status !== 'online' && website.Status !== 'destroy_fail') {\n            throw new error_1.CloudBaseError(`静态网站服务【${HostingStatusMap[website.Status]}】，无法进行此操作！`, {\n                code: 'INVALID_OPERATION'\n            });\n        }\n        const res = await this.tcbService.request('DestroyStaticStore', {\n            EnvId: envId\n        });\n        const code = res.Result === 'succ' ? 0 : -1;\n        return {\n            code,\n            requestId: res.RequestId\n        };\n    }\n    /**\n     * 支持上传单个文件，文件夹，或多个文件\n     * @param options\n     */\n    async uploadFiles(options) {\n        const { localPath, cloudPath, files = [], onProgress, onFileFinish, parallel = 20, ignore, retryCount, retryInterval } = options;\n        const hosting = await this.checkStatus();\n        const { Bucket, Regoin } = hosting;\n        const storageService = await this.environment.getStorageService();\n        let uploadFiles = Array.isArray(files) ? files : [];\n        // localPath 存在，上传文件夹/文件\n        if (localPath) {\n            const resolvePath = path_1.default.resolve(localPath);\n            // 检查路径是否存在\n            utils_1.checkReadable(resolvePath, true);\n            if (utils_1.isDirectory(resolvePath)) {\n                return storageService.uploadDirectoryCustom({\n                    localPath: resolvePath,\n                    cloudPath,\n                    bucket: Bucket,\n                    region: Regoin,\n                    onProgress,\n                    onFileFinish,\n                    fileId: false,\n                    ignore,\n                    retryCount,\n                    retryInterval,\n                });\n            }\n            else {\n                // 文件上传统一通过批量上传接口\n                const assignCloudPath = cloudPath || path_1.default.parse(resolvePath).base;\n                uploadFiles.push({\n                    localPath: resolvePath,\n                    cloudPath: assignCloudPath\n                });\n            }\n        }\n        // 文件上传统一通过批量上传接口\n        return storageService.uploadFilesCustom({\n            ignore,\n            parallel,\n            onProgress,\n            onFileFinish,\n            bucket: Bucket,\n            region: Regoin,\n            files: uploadFiles,\n            fileId: false,\n            retryCount,\n            retryInterval,\n        });\n    }\n    /**\n     * 删除文件或文件夹\n     * @param options\n     */\n    async deleteFiles(options) {\n        const { cloudPath, isDir } = options;\n        const hosting = await this.checkStatus();\n        const { Bucket, Regoin } = hosting;\n        const storageService = await this.environment.getStorageService();\n        if (isDir) {\n            return storageService.deleteDirectoryCustom({\n                cloudPath,\n                bucket: Bucket,\n                region: Regoin\n            });\n        }\n        else {\n            try {\n                await storageService.deleteFileCustom([cloudPath], Bucket, Regoin);\n                return {\n                    Deleted: [{ Key: cloudPath }],\n                    Error: []\n                };\n            }\n            catch (e) {\n                return {\n                    Deleted: [],\n                    Error: [e]\n                };\n            }\n        }\n    }\n    /**\n     * 下载文件\n     * @param {string} cloudPath 云端文件路径\n     * @param {string} localPath 文件本地存储路径，文件需指定文件名称\n     * @returns {Promise<NodeJS.ReadableStream>}\n     */\n    async downloadFile(options) {\n        const { cloudPath, localPath } = options;\n        const resolveLocalPath = path_1.default.resolve(localPath);\n        const fileDir = path_1.default.dirname(localPath);\n        utils_1.checkFullAccess(fileDir, true);\n        const envConfig = this.environment.lazyEnvironmentConfig;\n        const cacheHosting = envDomainCache.get(envConfig.EnvId);\n        let CdnDomain;\n        // 2 分钟有效\n        if ((cacheHosting === null || cacheHosting === void 0 ? void 0 : cacheHosting.cacheTime) && Number(cacheHosting === null || cacheHosting === void 0 ? void 0 : cacheHosting.cacheTime) + 120000 < Date.now()) {\n            console.log('cache');\n            CdnDomain = cacheHosting.CdnDomain;\n        }\n        else {\n            const hosting = await this.checkStatus();\n            CdnDomain = hosting.CdnDomain;\n            envDomainCache.set(envConfig.EnvId, Object.assign(Object.assign({}, hosting), { cacheTime: Date.now() }));\n        }\n        const url = new URL(cloudPath, `https://${CdnDomain}`).toString();\n        const { proxy } = await this.environment.getAuthConfig();\n        const res = await utils_1.fetchStream(url, {}, proxy);\n        // localPath 不存在时，返回 ReadableStream\n        if (!localPath) {\n            return res.body;\n        }\n        const dest = fs_1.default.createWriteStream(resolveLocalPath);\n        res.body.pipe(dest);\n        // 写完成后返回\n        return new Promise(resolve => {\n            dest.on('close', () => {\n                // 返回文件地址\n                resolve(resolveLocalPath);\n            });\n        });\n    }\n    /**\n     * 下载文件夹\n     * @param {string} cloudPath 云端文件路径\n     * @param {string} localPath 本地文件夹存储路径\n     * @returns {Promise<(NodeJS.ReadableStream | string)[]>}\n     */\n    async downloadDirectory(options) {\n        const { cloudPath, localPath } = options;\n        const resolveLocalPath = path_1.default.resolve(localPath);\n        const hosting = await this.checkStatus();\n        const { Bucket, Regoin } = hosting;\n        const cloudDirectoryKey = this.getCloudKey(cloudPath);\n        const storageService = await this.environment.getStorageService();\n        const files = await storageService.walkCloudDirCustom({\n            prefix: cloudDirectoryKey,\n            bucket: Bucket,\n            region: Regoin\n        });\n        const tasks = files.map(file => async () => {\n            const fileRelativePath = file.Key.replace(cloudDirectoryKey, '');\n            // 空路径和文件夹跳过\n            if (!fileRelativePath || /\\/$/g.test(fileRelativePath)) {\n                return;\n            }\n            const localFilePath = path_1.default.join(resolveLocalPath, fileRelativePath);\n            // 创建文件的父文件夹\n            const fileDir = path_1.default.dirname(localFilePath);\n            await make_dir_1.default(fileDir);\n            return this.downloadFile({\n                cloudPath: file.Key,\n                localPath: localFilePath\n            });\n        });\n        // 下载请求\n        const creatingDirController = new parallel_1.AsyncTaskParallelController(20, 50);\n        creatingDirController.loadTasks(tasks);\n        await creatingDirController.run();\n    }\n    // 遍历文件\n    async walkLocalDir(envId, dir) {\n        const storageService = await this.environment.getStorageService();\n        return storageService.walkLocalDir(dir);\n    }\n    /**\n     * 绑定自定义域名\n     * @param {IBindDomainOptions} options\n     * @returns\n     * @memberof HostingService\n     */\n    async CreateHostingDomain(options) {\n        const { envId } = this.getHostingConfig();\n        const { certId, domain } = options;\n        const res = await this.tcbService.request('CreateHostingDomain', {\n            EnvId: envId,\n            Domain: domain,\n            CertId: certId\n        });\n        return res;\n    }\n    /**\n     * 删除托管域名\n     *\n     * @param {IBindDomainOptions} options\n     * @returns\n     * @memberof HostingService\n     */\n    async deleteHostingDomain(options) {\n        const { envId } = this.getHostingConfig();\n        const { domain } = options;\n        return this.tcbService.request('DeleteHostingDomain', {\n            EnvId: envId,\n            Domain: domain\n        });\n    }\n    /**\n     * 查询域名状态信息\n     * @param options\n     */\n    async tcbCheckResource(options) {\n        return this.cdnService.request('TcbCheckResource', {\n            Domains: options.domains\n        });\n    }\n    /**\n     * 域名配置变更\n     * @param options\n     */\n    async tcbModifyAttribute(options) {\n        const { domain, domainId, domainConfig } = options;\n        const res = await this.cdnService.request('TcbModifyAttribute', {\n            Domain: domain,\n            DomainId: domainId,\n            DomainConfig: domainConfig\n        });\n        return res;\n    }\n    /**\n     * 查询静态网站配置\n     * @memberof HostingService\n     */\n    async getWebsiteConfig() {\n        const hosting = await this.checkStatus();\n        const { Bucket, Regoin } = hosting;\n        const storageService = await this.environment.getStorageService();\n        const res = await storageService.getWebsiteConfig({ bucket: Bucket, region: Regoin });\n        return res;\n    }\n    /**\n     * 配置静态网站文档\n     * @param options\n     */\n    async setWebsiteDocument(options) {\n        const { indexDocument, errorDocument, routingRules } = options;\n        const hosting = await this.checkStatus();\n        const { Bucket, Regoin } = hosting;\n        const storageService = await this.environment.getStorageService();\n        const res = await storageService.putBucketWebsite({\n            bucket: Bucket,\n            region: Regoin,\n            indexDocument,\n            errorDocument,\n            routingRules\n        });\n        return res;\n    }\n    /**\n     * 检查 hosting 服务状态\n     */\n    async checkStatus() {\n        const hostings = await this.getInfo();\n        if (!hostings || !hostings.length) {\n            throw new error_1.CloudBaseError(`您还没有开启静态网站服务，请先到云开发控制台开启静态网站服务！`, {\n                code: 'INVALID_OPERATION'\n            });\n        }\n        const website = hostings[0];\n        if (website.Status !== 'online') {\n            throw new error_1.CloudBaseError(`静态网站服务【${HostingStatusMap[website.Status]}】，无法进行此操作！`, {\n                code: 'INVALID_OPERATION'\n            });\n        }\n        return website;\n    }\n    /**\n     * 获取配置\n     */\n    getHostingConfig() {\n        var _a;\n        const envConfig = this.environment.lazyEnvironmentConfig;\n        const appId = (_a = envConfig.Storages[0]) === null || _a === void 0 ? void 0 : _a.AppId;\n        const { proxy } = this.environment.cloudBaseContext;\n        return {\n            appId,\n            proxy,\n            envId: envConfig.EnvId\n        };\n    }\n    /**\n     * 将 cloudPath 转换成 cloudPath/ 形式\n     */\n    getCloudKey(cloudPath) {\n        if (!cloudPath) {\n            return '';\n        }\n        // 单个 / 转换成根目录\n        if (cloudPath === '/') {\n            return '';\n        }\n        return cloudPath[cloudPath.length - 1] === '/' ? cloudPath : `${cloudPath}/`;\n    }\n}\n__decorate([\n    utils_1.preLazy()\n], HostingService.prototype, \"getInfo\", null);\n__decorate([\n    utils_1.preLazy()\n], HostingService.prototype, \"enableService\", null);\n__decorate([\n    utils_1.preLazy()\n], HostingService.prototype, \"listFiles\", null);\n__decorate([\n    utils_1.preLazy()\n], HostingService.prototype, \"destroyService\", null);\n__decorate([\n    utils_1.preLazy()\n], HostingService.prototype, \"uploadFiles\", null);\n__decorate([\n    utils_1.preLazy()\n], HostingService.prototype, \"deleteFiles\", null);\n__decorate([\n    utils_1.preLazy()\n], HostingService.prototype, \"downloadFile\", null);\n__decorate([\n    utils_1.preLazy()\n], HostingService.prototype, \"downloadDirectory\", null);\n__decorate([\n    utils_1.preLazy()\n], HostingService.prototype, \"walkLocalDir\", null);\n__decorate([\n    utils_1.preLazy()\n], HostingService.prototype, \"CreateHostingDomain\", null);\n__decorate([\n    utils_1.preLazy()\n], HostingService.prototype, \"deleteHostingDomain\", null);\n__decorate([\n    utils_1.preLazy()\n], HostingService.prototype, \"checkStatus\", null);\nexports.HostingService = HostingService;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ThirdService = void 0;\nconst utils_1 = require(\"../utils\");\nclass ThirdService {\n    constructor(environment) {\n        this.cloudService = new utils_1.CloudService(environment.cloudBaseContext, 'tcb', '2018-06-08');\n    }\n    // 解除第三方小程序绑定\n    async deleteThirdPartAttach(options) {\n        const { ThirdPartAppid, TypeFlag } = options;\n        return this.cloudService.request('DeleteThirdPartAttach', {\n            ThirdPartAppid,\n            TypeFlag\n        });\n    }\n}\nexports.ThirdService = ThirdService;\n","\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AccessService = void 0;\nconst utils_1 = require(\"../utils\");\nclass AccessService {\n    constructor(environment) {\n        this.environment = environment;\n        this.tcbService = new utils_1.CloudService(environment.cloudBaseContext, 'tcb', '2018-06-08');\n    }\n    // 创建云接入路径\n    async createAccess(options) {\n        const { path, name, type = 1, auth } = options;\n        const { envId } = this.getEnvInfo();\n        return this.tcbService.request('CreateCloudBaseGWAPI', {\n            ServiceId: envId,\n            Path: path,\n            Type: type,\n            Name: name,\n            AuthSwitch: auth ? 1 : 2\n        });\n    }\n    // 获取云接入自定义域名列表\n    async getDomainList() {\n        const { envId } = this.getEnvInfo();\n        return this.tcbService.request('DescribeCloudBaseGWService', {\n            ServiceId: envId\n        });\n    }\n    // 获取云接入服务列表\n    async getAccessList(options = {}) {\n        const { path, name, offset, limit } = options;\n        const { envId } = this.getEnvInfo();\n        return this.tcbService.request('DescribeCloudBaseGWAPI', {\n            ServiceId: envId,\n            Path: path,\n            Name: name,\n            Offset: offset,\n            limit: limit\n        });\n    }\n    // 切换云接入服务开关：开启/关闭\n    async switchAuth(auth) {\n        const { envId } = this.getEnvInfo();\n        return this.tcbService.request('ModifyCloudBaseGWPrivilege', {\n            ServiceId: envId,\n            EnableService: auth,\n            Options: [\n                {\n                    Key: 'serviceswitch',\n                    Value: auth ? 'true' : 'false'\n                }\n            ]\n        });\n    }\n    // 更新云接入路径鉴权\n    async switchPathAuth(options) {\n        const { apiIds, auth } = options;\n        const { envId } = this.getEnvInfo();\n        return this.tcbService.request('ModifyCloudBaseGWAPIPrivilegeBatch', {\n            ServiceId: envId,\n            APIIdSet: apiIds,\n            Options: [\n                {\n                    Key: 'authswitch',\n                    Value: auth ? 'true' : 'false'\n                }\n            ]\n        });\n    }\n    // 删除云接入服务\n    async deleteAccess(options) {\n        const { name, type = 1, apiId } = options;\n        const { envId } = this.getEnvInfo();\n        return this.tcbService.request('DeleteCloudBaseGWAPI', {\n            ServiceId: envId,\n            Name: name,\n            Type: type,\n            APIId: apiId\n        });\n    }\n    // 添加自定义域名\n    async addCustomDomain(options) {\n        const { domain, certId } = options;\n        const { envId } = this.getEnvInfo();\n        return this.tcbService.request('BindCloudBaseGWDomain', {\n            Domain: domain,\n            ServiceId: envId,\n            CertId: certId\n        });\n    }\n    // 删除自定义域名\n    async deleteCustomDomain(domain) {\n        const { envId } = this.getEnvInfo();\n        return this.tcbService.request('DeleteCloudBaseGWDomain', {\n            Domain: domain,\n            ServiceId: envId\n        });\n    }\n    getEnvInfo() {\n        var _a;\n        const envConfig = this.environment.lazyEnvironmentConfig;\n        const appId = (_a = envConfig.Storages[0]) === null || _a === void 0 ? void 0 : _a.AppId;\n        const { proxy } = this.environment.cloudBaseContext;\n        return {\n            appId,\n            proxy,\n            envId: envConfig.EnvId\n        };\n    }\n}\n__decorate([\n    utils_1.preLazy()\n], AccessService.prototype, \"createAccess\", null);\n__decorate([\n    utils_1.preLazy()\n], AccessService.prototype, \"getDomainList\", null);\n__decorate([\n    utils_1.preLazy()\n], AccessService.prototype, \"getAccessList\", null);\n__decorate([\n    utils_1.preLazy()\n], AccessService.prototype, \"switchAuth\", null);\n__decorate([\n    utils_1.preLazy()\n], AccessService.prototype, \"switchPathAuth\", null);\n__decorate([\n    utils_1.preLazy()\n], AccessService.prototype, \"deleteAccess\", null);\n__decorate([\n    utils_1.preLazy()\n], AccessService.prototype, \"addCustomDomain\", null);\n__decorate([\n    utils_1.preLazy()\n], AccessService.prototype, \"deleteCustomDomain\", null);\nexports.AccessService = AccessService;\n","\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UserService = void 0;\nconst utils_1 = require(\"../utils\");\nclass UserService {\n    constructor(environment) {\n        this.environment = environment;\n        this.tcbService = new utils_1.CloudService(environment.cloudBaseContext, 'tcb', '2018-06-08');\n    }\n    // 获取云开发用户列表\n    async getEndUserList(options) {\n        const { limit, offset } = options;\n        const { EnvId } = this.environment.lazyEnvironmentConfig;\n        return this.tcbService.request('DescribeEndUsers', {\n            EnvId,\n            Limit: limit,\n            Offset: offset\n        });\n    }\n    // // 停用云开发用户\n    // @preLazy()\n    // public async disableEndUser(options: {\n    //     uuid: string\n    // }) {\n    //     const { uuid } = options\n    //     const { EnvId } = this.environment.lazyEnvironmentConfig\n    //     return this.tcbService.request<{\n    //         RequestId: string\n    //     }>('ModifyEndUser', {\n    //         EnvId,\n    //         UUId: uuid,\n    //         Status: 'DISABLE'\n    //     })\n    // }\n    // 设置云开发用户状态（停用或启用）\n    async setEndUserStatus(options) {\n        const { uuid, status } = options;\n        const { EnvId } = this.environment.lazyEnvironmentConfig;\n        return this.tcbService.request('ModifyEndUser', {\n            EnvId,\n            UUId: uuid,\n            Status: status\n        });\n    }\n    // 批量删除云开发用户\n    async deleteEndUsers(options) {\n        const { userList } = options;\n        const { EnvId } = this.environment.lazyEnvironmentConfig;\n        return this.tcbService.request('DeleteEndUser', {\n            EnvId,\n            UserList: userList\n        });\n    }\n    // 创建用户名密码\n    async createEndUser(options) {\n        const { username, password } = options;\n        const { EnvId } = this.environment.lazyEnvironmentConfig;\n        return this.tcbService.request('CreateEndUserAccount', {\n            EnvId,\n            Username: username,\n            Password: password,\n        });\n    }\n    // 更改用户账户\n    async modifyEndUser(options) {\n        const { uuid, username, password } = options;\n        const { EnvId } = this.environment.lazyEnvironmentConfig;\n        const reqData = {\n            EnvId,\n            Uuid: uuid\n        };\n        if (this.isValidStr(username)) {\n            reqData.Username = username;\n        }\n        if (this.isValidStr(password)) {\n            reqData.Password = password;\n        }\n        return this.tcbService.request('ModifyEndUserAccount', reqData);\n    }\n    // 更改用户信息\n    async updateEndUser(options) {\n        const { uuid, nickName, gender, avatarUrl, country, province, city } = options;\n        const { EnvId } = this.environment.lazyEnvironmentConfig;\n        return this.tcbService.request('ModifyEndUserInfo', {\n            UUId: uuid,\n            EnvId,\n            Data: [{\n                    Key: 'Name',\n                    Value: nickName\n                }, {\n                    Key: 'Gender',\n                    Value: gender\n                }, {\n                    Key: 'AvatarUrl',\n                    Value: avatarUrl\n                }, {\n                    Key: 'Country',\n                    Value: country\n                }, {\n                    Key: 'Province',\n                    Value: province\n                }, {\n                    Key: 'City',\n                    Value: city\n                }]\n        });\n    }\n    isValidStr(obj) {\n        return typeof obj === 'string' && obj.trim().length > 0;\n    }\n}\n__decorate([\n    utils_1.preLazy()\n], UserService.prototype, \"getEndUserList\", null);\n__decorate([\n    utils_1.preLazy()\n], UserService.prototype, \"setEndUserStatus\", null);\n__decorate([\n    utils_1.preLazy()\n], UserService.prototype, \"deleteEndUsers\", null);\n__decorate([\n    utils_1.preLazy()\n], UserService.prototype, \"createEndUser\", null);\n__decorate([\n    utils_1.preLazy()\n], UserService.prototype, \"modifyEndUser\", null);\n__decorate([\n    utils_1.preLazy()\n], UserService.prototype, \"updateEndUser\", null);\nexports.UserService = UserService;\n","\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CloudBaseRunService = void 0;\nconst utils_1 = require(\"../utils\");\nclass CloudBaseRunService {\n    constructor(environment) {\n        this.environment = environment;\n        this.tcbService = new utils_1.CloudService(environment.cloudBaseContext, 'tcb', '2018-06-08');\n    }\n    // 修改容器内版本流量配置\n    async modifyServerFlow(options) {\n        const { envId } = this.getEnvInfo();\n        return this.tcbService.request('ModifyCloudBaseRunServerFlowConf', {\n            EnvId: envId,\n            ServerName: options.serverName,\n            VersionFlowItems: utils_1.upperCaseObjKey(options.versionFlowItems)\n            // TrafficType: options.trafficType\n        });\n    }\n    getEnvInfo() {\n        const envConfig = this.environment.lazyEnvironmentConfig;\n        return {\n            envId: envConfig.EnvId\n        };\n    }\n}\n__decorate([\n    utils_1.preLazy()\n], CloudBaseRunService.prototype, \"modifyServerFlow\", null);\nexports.CloudBaseRunService = CloudBaseRunService;\n"]}